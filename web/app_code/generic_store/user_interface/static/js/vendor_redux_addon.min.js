webpackJsonp([4],{

/***/ 251:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var repeat = exports.repeat = function repeat(str, times) {
  return new Array(times + 1).join(str);
};

var pad = exports.pad = function pad(num, maxLength) {
  return repeat("0", maxLength - num.toString().length) + num;
};

var formatTime = exports.formatTime = function formatTime(time) {
  return pad(time.getHours(), 2) + ":" + pad(time.getMinutes(), 2) + ":" + pad(time.getSeconds(), 2) + "." + pad(time.getMilliseconds(), 3);
};

// Use performance API if it's available in order to get better precision
var timer = exports.timer = typeof performance !== "undefined" && performance !== null && typeof performance.now === "function" ? performance : Date;

/***/ }),

/***/ 322:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
 * deep-diff.
 * Licensed under the MIT License.
 */
;(function (root, factory) {
  'use strict';

  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {
      return factory();
    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
    // Node. Does not work with strict CommonJS, but
    // only CommonJS-like environments that support module.exports,
    // like Node.
    module.exports = factory();
  } else {
    // Browser globals (root is window)
    root.DeepDiff = factory();
  }
})(undefined, function (undefined) {
  'use strict';

  var $scope,
      conflict,
      conflictResolution = [];
  if ((typeof global === 'undefined' ? 'undefined' : _typeof(global)) === 'object' && global) {
    $scope = global;
  } else if (typeof window !== 'undefined') {
    $scope = window;
  } else {
    $scope = {};
  }
  conflict = $scope.DeepDiff;
  if (conflict) {
    conflictResolution.push(function () {
      if ('undefined' !== typeof conflict && $scope.DeepDiff === accumulateDiff) {
        $scope.DeepDiff = conflict;
        conflict = undefined;
      }
    });
  }

  // nodejs compatible on server side and in the browser.
  function inherits(ctor, superCtor) {
    ctor.super_ = superCtor;
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  }

  function Diff(kind, path) {
    Object.defineProperty(this, 'kind', {
      value: kind,
      enumerable: true
    });
    if (path && path.length) {
      Object.defineProperty(this, 'path', {
        value: path,
        enumerable: true
      });
    }
  }

  function DiffEdit(path, origin, value) {
    DiffEdit.super_.call(this, 'E', path);
    Object.defineProperty(this, 'lhs', {
      value: origin,
      enumerable: true
    });
    Object.defineProperty(this, 'rhs', {
      value: value,
      enumerable: true
    });
  }
  inherits(DiffEdit, Diff);

  function DiffNew(path, value) {
    DiffNew.super_.call(this, 'N', path);
    Object.defineProperty(this, 'rhs', {
      value: value,
      enumerable: true
    });
  }
  inherits(DiffNew, Diff);

  function DiffDeleted(path, value) {
    DiffDeleted.super_.call(this, 'D', path);
    Object.defineProperty(this, 'lhs', {
      value: value,
      enumerable: true
    });
  }
  inherits(DiffDeleted, Diff);

  function DiffArray(path, index, item) {
    DiffArray.super_.call(this, 'A', path);
    Object.defineProperty(this, 'index', {
      value: index,
      enumerable: true
    });
    Object.defineProperty(this, 'item', {
      value: item,
      enumerable: true
    });
  }
  inherits(DiffArray, Diff);

  function arrayRemove(arr, from, to) {
    var rest = arr.slice((to || from) + 1 || arr.length);
    arr.length = from < 0 ? arr.length + from : from;
    arr.push.apply(arr, rest);
    return arr;
  }

  function realTypeOf(subject) {
    var type = typeof subject === 'undefined' ? 'undefined' : _typeof(subject);
    if (type !== 'object') {
      return type;
    }

    if (subject === Math) {
      return 'math';
    } else if (subject === null) {
      return 'null';
    } else if (Array.isArray(subject)) {
      return 'array';
    } else if (Object.prototype.toString.call(subject) === '[object Date]') {
      return 'date';
    } else if (typeof subject.toString !== 'undefined' && /^\/.*\//.test(subject.toString())) {
      return 'regexp';
    }
    return 'object';
  }

  function deepDiff(lhs, rhs, changes, prefilter, path, key, stack) {
    path = path || [];
    var currentPath = path.slice(0);
    if (typeof key !== 'undefined') {
      if (prefilter) {
        if (typeof prefilter === 'function' && prefilter(currentPath, key)) {
          return;
        } else if ((typeof prefilter === 'undefined' ? 'undefined' : _typeof(prefilter)) === 'object') {
          if (prefilter.prefilter && prefilter.prefilter(currentPath, key)) {
            return;
          }
          if (prefilter.normalize) {
            var alt = prefilter.normalize(currentPath, key, lhs, rhs);
            if (alt) {
              lhs = alt[0];
              rhs = alt[1];
            }
          }
        }
      }
      currentPath.push(key);
    }

    // Use string comparison for regexes
    if (realTypeOf(lhs) === 'regexp' && realTypeOf(rhs) === 'regexp') {
      lhs = lhs.toString();
      rhs = rhs.toString();
    }

    var ltype = typeof lhs === 'undefined' ? 'undefined' : _typeof(lhs);
    var rtype = typeof rhs === 'undefined' ? 'undefined' : _typeof(rhs);
    if (ltype === 'undefined') {
      if (rtype !== 'undefined') {
        changes(new DiffNew(currentPath, rhs));
      }
    } else if (rtype === 'undefined') {
      changes(new DiffDeleted(currentPath, lhs));
    } else if (realTypeOf(lhs) !== realTypeOf(rhs)) {
      changes(new DiffEdit(currentPath, lhs, rhs));
    } else if (Object.prototype.toString.call(lhs) === '[object Date]' && Object.prototype.toString.call(rhs) === '[object Date]' && lhs - rhs !== 0) {
      changes(new DiffEdit(currentPath, lhs, rhs));
    } else if (ltype === 'object' && lhs !== null && rhs !== null) {
      stack = stack || [];
      if (stack.indexOf(lhs) < 0) {
        stack.push(lhs);
        if (Array.isArray(lhs)) {
          var i,
              len = lhs.length;
          for (i = 0; i < lhs.length; i++) {
            if (i >= rhs.length) {
              changes(new DiffArray(currentPath, i, new DiffDeleted(undefined, lhs[i])));
            } else {
              deepDiff(lhs[i], rhs[i], changes, prefilter, currentPath, i, stack);
            }
          }
          while (i < rhs.length) {
            changes(new DiffArray(currentPath, i, new DiffNew(undefined, rhs[i++])));
          }
        } else {
          var akeys = Object.keys(lhs);
          var pkeys = Object.keys(rhs);
          akeys.forEach(function (k, i) {
            var other = pkeys.indexOf(k);
            if (other >= 0) {
              deepDiff(lhs[k], rhs[k], changes, prefilter, currentPath, k, stack);
              pkeys = arrayRemove(pkeys, other);
            } else {
              deepDiff(lhs[k], undefined, changes, prefilter, currentPath, k, stack);
            }
          });
          pkeys.forEach(function (k) {
            deepDiff(undefined, rhs[k], changes, prefilter, currentPath, k, stack);
          });
        }
        stack.length = stack.length - 1;
      }
    } else if (lhs !== rhs) {
      if (!(ltype === 'number' && isNaN(lhs) && isNaN(rhs))) {
        changes(new DiffEdit(currentPath, lhs, rhs));
      }
    }
  }

  function accumulateDiff(lhs, rhs, prefilter, accum) {
    accum = accum || [];
    deepDiff(lhs, rhs, function (diff) {
      if (diff) {
        accum.push(diff);
      }
    }, prefilter);
    return accum.length ? accum : undefined;
  }

  function applyArrayChange(arr, index, change) {
    if (change.path && change.path.length) {
      var it = arr[index],
          i,
          u = change.path.length - 1;
      for (i = 0; i < u; i++) {
        it = it[change.path[i]];
      }
      switch (change.kind) {
        case 'A':
          applyArrayChange(it[change.path[i]], change.index, change.item);
          break;
        case 'D':
          delete it[change.path[i]];
          break;
        case 'E':
        case 'N':
          it[change.path[i]] = change.rhs;
          break;
      }
    } else {
      switch (change.kind) {
        case 'A':
          applyArrayChange(arr[index], change.index, change.item);
          break;
        case 'D':
          arr = arrayRemove(arr, index);
          break;
        case 'E':
        case 'N':
          arr[index] = change.rhs;
          break;
      }
    }
    return arr;
  }

  function applyChange(target, source, change) {
    if (target && source && change && change.kind) {
      var it = target,
          i = -1,
          last = change.path ? change.path.length - 1 : 0;
      while (++i < last) {
        if (typeof it[change.path[i]] === 'undefined') {
          it[change.path[i]] = typeof change.path[i] === 'number' ? [] : {};
        }
        it = it[change.path[i]];
      }
      switch (change.kind) {
        case 'A':
          applyArrayChange(change.path ? it[change.path[i]] : it, change.index, change.item);
          break;
        case 'D':
          delete it[change.path[i]];
          break;
        case 'E':
        case 'N':
          it[change.path[i]] = change.rhs;
          break;
      }
    }
  }

  function revertArrayChange(arr, index, change) {
    if (change.path && change.path.length) {
      // the structure of the object at the index has changed...
      var it = arr[index],
          i,
          u = change.path.length - 1;
      for (i = 0; i < u; i++) {
        it = it[change.path[i]];
      }
      switch (change.kind) {
        case 'A':
          revertArrayChange(it[change.path[i]], change.index, change.item);
          break;
        case 'D':
          it[change.path[i]] = change.lhs;
          break;
        case 'E':
          it[change.path[i]] = change.lhs;
          break;
        case 'N':
          delete it[change.path[i]];
          break;
      }
    } else {
      // the array item is different...
      switch (change.kind) {
        case 'A':
          revertArrayChange(arr[index], change.index, change.item);
          break;
        case 'D':
          arr[index] = change.lhs;
          break;
        case 'E':
          arr[index] = change.lhs;
          break;
        case 'N':
          arr = arrayRemove(arr, index);
          break;
      }
    }
    return arr;
  }

  function revertChange(target, source, change) {
    if (target && source && change && change.kind) {
      var it = target,
          i,
          u;
      u = change.path.length - 1;
      for (i = 0; i < u; i++) {
        if (typeof it[change.path[i]] === 'undefined') {
          it[change.path[i]] = {};
        }
        it = it[change.path[i]];
      }
      switch (change.kind) {
        case 'A':
          // Array was modified...
          // it will be an array...
          revertArrayChange(it[change.path[i]], change.index, change.item);
          break;
        case 'D':
          // Item was deleted...
          it[change.path[i]] = change.lhs;
          break;
        case 'E':
          // Item was edited...
          it[change.path[i]] = change.lhs;
          break;
        case 'N':
          // Item is new...
          delete it[change.path[i]];
          break;
      }
    }
  }

  function applyDiff(target, source, filter) {
    if (target && source) {
      var onChange = function onChange(change) {
        if (!filter || filter(target, source, change)) {
          applyChange(target, source, change);
        }
      };
      deepDiff(target, source, onChange);
    }
  }

  Object.defineProperties(accumulateDiff, {

    diff: {
      value: accumulateDiff,
      enumerable: true
    },
    observableDiff: {
      value: deepDiff,
      enumerable: true
    },
    applyDiff: {
      value: applyDiff,
      enumerable: true
    },
    applyChange: {
      value: applyChange,
      enumerable: true
    },
    revertChange: {
      value: revertChange,
      enumerable: true
    },
    isConflict: {
      value: function value() {
        return 'undefined' !== typeof conflict;
      },
      enumerable: true
    },
    noConflict: {
      value: function value() {
        if (conflictResolution) {
          conflictResolution.forEach(function (it) {
            it();
          });
          conflictResolution = null;
        }
        return accumulateDiff;
      },
      enumerable: true
    }
  });

  return accumulateDiff;
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(157)))

/***/ }),

/***/ 549:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

exports.printBuffer = printBuffer;

var _helpers = __webpack_require__(251);

var _diff = __webpack_require__(551);

var _diff2 = _interopRequireDefault(_diff);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

/**
 * Get log level string based on supplied params
 *
 * @param {string | function | object} level - console[level]
 * @param {object} action - selected action
 * @param {array} payload - selected payload
 * @param {string} type - log entry type
 *
 * @returns {string} level
 */
function getLogLevel(level, action, payload, type) {
  switch (typeof level === 'undefined' ? 'undefined' : _typeof(level)) {
    case 'object':
      return typeof level[type] === 'function' ? level[type].apply(level, _toConsumableArray(payload)) : level[type];
    case 'function':
      return level(action);
    default:
      return level;
  }
}

function defaultTitleFormatter(options) {
  var timestamp = options.timestamp,
      duration = options.duration;

  return function (action, time, took) {
    var parts = ['action'];

    if (timestamp) parts.push('@ ' + time);
    parts.push(String(action.type));
    if (duration) parts.push('(in ' + took.toFixed(2) + ' ms)');

    return parts.join(' ');
  };
}

function printBuffer(buffer, options) {
  var logger = options.logger,
      actionTransformer = options.actionTransformer,
      _options$titleFormatt = options.titleFormatter,
      titleFormatter = _options$titleFormatt === undefined ? defaultTitleFormatter(options) : _options$titleFormatt,
      collapsed = options.collapsed,
      colors = options.colors,
      level = options.level,
      diff = options.diff;

  buffer.forEach(function (logEntry, key) {
    var started = logEntry.started,
        startedTime = logEntry.startedTime,
        action = logEntry.action,
        prevState = logEntry.prevState,
        error = logEntry.error;
    var took = logEntry.took,
        nextState = logEntry.nextState;

    var nextEntry = buffer[key + 1];

    if (nextEntry) {
      nextState = nextEntry.prevState;
      took = nextEntry.started - started;
    }

    // Message
    var formattedAction = actionTransformer(action);
    var isCollapsed = typeof collapsed === 'function' ? collapsed(function () {
      return nextState;
    }, action, logEntry) : collapsed;

    var formattedTime = (0, _helpers.formatTime)(startedTime);
    var titleCSS = colors.title ? 'color: ' + colors.title(formattedAction) + ';' : null;
    var title = titleFormatter(formattedAction, formattedTime, took);

    // Render
    try {
      if (isCollapsed) {
        if (colors.title) logger.groupCollapsed('%c ' + title, titleCSS);else logger.groupCollapsed(title);
      } else {
        if (colors.title) logger.group('%c ' + title, titleCSS);else logger.group(title);
      }
    } catch (e) {
      logger.log(title);
    }

    var prevStateLevel = getLogLevel(level, formattedAction, [prevState], 'prevState');
    var actionLevel = getLogLevel(level, formattedAction, [formattedAction], 'action');
    var errorLevel = getLogLevel(level, formattedAction, [error, prevState], 'error');
    var nextStateLevel = getLogLevel(level, formattedAction, [nextState], 'nextState');

    if (prevStateLevel) {
      if (colors.prevState) logger[prevStateLevel]('%c prev state', 'color: ' + colors.prevState(prevState) + '; font-weight: bold', prevState);else logger[prevStateLevel]('prev state', prevState);
    }

    if (actionLevel) {
      if (colors.action) logger[actionLevel]('%c action', 'color: ' + colors.action(formattedAction) + '; font-weight: bold', formattedAction);else logger[actionLevel]('action', formattedAction);
    }

    if (error && errorLevel) {
      if (colors.error) logger[errorLevel]('%c error', 'color: ' + colors.error(error, prevState) + '; font-weight: bold', error);else logger[errorLevel]('error', error);
    }

    if (nextStateLevel) {
      if (colors.nextState) logger[nextStateLevel]('%c next state', 'color: ' + colors.nextState(nextState) + '; font-weight: bold', nextState);else logger[nextStateLevel]('next state', nextState);
    }

    if (diff) {
      (0, _diff2.default)(prevState, nextState, logger, isCollapsed);
    }

    try {
      logger.groupEnd();
    } catch (e) {
      logger.log("\u2014\u2014 log end \u2014\u2014");
    }
  });
}

/***/ }),

/***/ 550:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = {
  level: "log",
  logger: console,
  logErrors: true,
  collapsed: undefined,
  predicate: undefined,
  duration: false,
  timestamp: true,
  stateTransformer: function stateTransformer(state) {
    return state;
  },
  actionTransformer: function actionTransformer(action) {
    return action;
  },
  errorTransformer: function errorTransformer(error) {
    return error;
  },
  colors: {
    title: function title() {
      return "inherit";
    },
    prevState: function prevState() {
      return "#9E9E9E";
    },
    action: function action() {
      return "#03A9F4";
    },
    nextState: function nextState() {
      return "#4CAF50";
    },
    error: function error() {
      return "#F20404";
    }
  },
  diff: false,
  diffPredicate: undefined,

  // Deprecated options
  transformer: undefined
};
module.exports = exports["default"];

/***/ }),

/***/ 551:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = diffLogger;

var _deepDiff = __webpack_require__(322);

var _deepDiff2 = _interopRequireDefault(_deepDiff);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

// https://github.com/flitbit/diff#differences
var dictionary = {
  'E': {
    color: '#2196F3',
    text: 'CHANGED:'
  },
  'N': {
    color: '#4CAF50',
    text: 'ADDED:'
  },
  'D': {
    color: '#F44336',
    text: 'DELETED:'
  },
  'A': {
    color: '#2196F3',
    text: 'ARRAY:'
  }
};

function style(kind) {
  return 'color: ' + dictionary[kind].color + '; font-weight: bold';
}

function render(diff) {
  var kind = diff.kind,
      path = diff.path,
      lhs = diff.lhs,
      rhs = diff.rhs,
      index = diff.index,
      item = diff.item;

  switch (kind) {
    case 'E':
      return [path.join('.'), lhs, '\u2192', rhs];
    case 'N':
      return [path.join('.'), rhs];
    case 'D':
      return [path.join('.')];
    case 'A':
      return [path.join('.') + '[' + index + ']', item];
    default:
      return [];
  }
}

function diffLogger(prevState, newState, logger, isCollapsed) {
  var diff = (0, _deepDiff2.default)(prevState, newState);

  try {
    if (isCollapsed) {
      logger.groupCollapsed('diff');
    } else {
      logger.group('diff');
    }
  } catch (e) {
    logger.log('diff');
  }

  if (diff) {
    diff.forEach(function (elem) {
      var kind = elem.kind;

      var output = render(elem);

      logger.log.apply(logger, ['%c ' + dictionary[kind].text, style(kind)].concat(_toConsumableArray(output)));
    });
  } else {
    logger.log('\u2014\u2014 no diff \u2014\u2014');
  }

  try {
    logger.groupEnd();
  } catch (e) {
    logger.log('\u2014\u2014 diff end \u2014\u2014 ');
  }
}
module.exports = exports['default'];

/***/ }),

/***/ 570:
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(97);
module.exports = __webpack_require__(98);


/***/ }),

/***/ 97:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _core = __webpack_require__(549);

var _helpers = __webpack_require__(251);

var _defaults = __webpack_require__(550);

var _defaults2 = _interopRequireDefault(_defaults);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

/**
 * Creates logger with following options
 *
 * @namespace
 * @param {object} options - options for logger
 * @param {string | function | object} options.level - console[level]
 * @param {boolean} options.duration - print duration of each action?
 * @param {boolean} options.timestamp - print timestamp with each action?
 * @param {object} options.colors - custom colors
 * @param {object} options.logger - implementation of the `console` API
 * @param {boolean} options.logErrors - should errors in action execution be caught, logged, and re-thrown?
 * @param {boolean} options.collapsed - is group collapsed?
 * @param {boolean} options.predicate - condition which resolves logger behavior
 * @param {function} options.stateTransformer - transform state before print
 * @param {function} options.actionTransformer - transform action before print
 * @param {function} options.errorTransformer - transform error before print
 *
 * @returns {function} logger middleware
 */
function createLogger() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var loggerOptions = _extends({}, _defaults2.default, options);

  var logger = loggerOptions.logger,
      transformer = loggerOptions.transformer,
      stateTransformer = loggerOptions.stateTransformer,
      errorTransformer = loggerOptions.errorTransformer,
      predicate = loggerOptions.predicate,
      logErrors = loggerOptions.logErrors,
      diffPredicate = loggerOptions.diffPredicate;

  // Return if 'console' object is not defined

  if (typeof logger === 'undefined') {
    return function () {
      return function (next) {
        return function (action) {
          return next(action);
        };
      };
    };
  }

  if (transformer) {
    console.error('Option \'transformer\' is deprecated, use \'stateTransformer\' instead!'); // eslint-disable-line no-console
  }

  // Detect if 'createLogger' was passed directly to 'applyMiddleware'.
  if (options.getState && options.dispatch) {
    // eslint-disable-next-line no-console
    console.error('redux-logger not installed. Make sure to pass logger instance as middleware:\n\nimport createLogger from \'redux-logger\';\n\nconst logger = createLogger();\nconst store = createStore(\n  reducer,\n  applyMiddleware(logger)\n);');

    return function () {
      return function (next) {
        return function (action) {
          return next(action);
        };
      };
    };
  }

  var logBuffer = [];

  return function (_ref) {
    var getState = _ref.getState;
    return function (next) {
      return function (action) {
        // Exit early if predicate function returns 'false'
        if (typeof predicate === 'function' && !predicate(getState, action)) {
          return next(action);
        }

        var logEntry = {};
        logBuffer.push(logEntry);

        logEntry.started = _helpers.timer.now();
        logEntry.startedTime = new Date();
        logEntry.prevState = stateTransformer(getState());
        logEntry.action = action;

        var returnedValue = void 0;
        if (logErrors) {
          try {
            returnedValue = next(action);
          } catch (e) {
            logEntry.error = errorTransformer(e);
          }
        } else {
          returnedValue = next(action);
        }

        logEntry.took = _helpers.timer.now() - logEntry.started;
        logEntry.nextState = stateTransformer(getState());

        var diff = loggerOptions.diff && typeof diffPredicate === 'function' ? diffPredicate(getState, action) : loggerOptions.diff;

        (0, _core.printBuffer)(logBuffer, _extends({}, loggerOptions, { diff: diff }));
        logBuffer.length = 0;

        if (logEntry.error) throw logEntry.error;
        return returnedValue;
      };
    };
  };
}

exports.default = createLogger;
module.exports = exports['default'];

/***/ }),

/***/ 98:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
function createThunkMiddleware(extraArgument) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;
    return function (next) {
      return function (action) {
        if (typeof action === 'function') {
          return action(dispatch, getState, extraArgument);
        }

        return next(action);
      };
    };
  };
}

var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;

exports['default'] = thunk;

/***/ })

},[570]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L3JlZHV4LWxvZ2dlci9saWIvaGVscGVycy5qcyIsIndlYnBhY2s6Ly8vLi9+L2RlZXAtZGlmZi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlZHV4LWxvZ2dlci9saWIvY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9+L3JlZHV4LWxvZ2dlci9saWIvZGVmYXVsdHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWR1eC1sb2dnZXIvbGliL2RpZmYuanMiLCJ3ZWJwYWNrOi8vLy4vfi9yZWR1eC1sb2dnZXIvbGliL2luZGV4LmpzIiwid2VicGFjazovLy8uL34vcmVkdXgtdGh1bmsvbGliL2luZGV4LmpzIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwicmVwZWF0Iiwic3RyIiwidGltZXMiLCJBcnJheSIsImpvaW4iLCJwYWQiLCJudW0iLCJtYXhMZW5ndGgiLCJ0b1N0cmluZyIsImxlbmd0aCIsImZvcm1hdFRpbWUiLCJ0aW1lIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInRpbWVyIiwicGVyZm9ybWFuY2UiLCJub3ciLCJEYXRlIiwicm9vdCIsImZhY3RvcnkiLCJkZWZpbmUiLCJtb2R1bGUiLCJEZWVwRGlmZiIsInVuZGVmaW5lZCIsIiRzY29wZSIsImNvbmZsaWN0IiwiY29uZmxpY3RSZXNvbHV0aW9uIiwiZ2xvYmFsIiwid2luZG93IiwicHVzaCIsImFjY3VtdWxhdGVEaWZmIiwiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3VwZXJfIiwicHJvdG90eXBlIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJlbnVtZXJhYmxlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJEaWZmIiwia2luZCIsInBhdGgiLCJEaWZmRWRpdCIsIm9yaWdpbiIsImNhbGwiLCJEaWZmTmV3IiwiRGlmZkRlbGV0ZWQiLCJEaWZmQXJyYXkiLCJpbmRleCIsIml0ZW0iLCJhcnJheVJlbW92ZSIsImFyciIsImZyb20iLCJ0byIsInJlc3QiLCJzbGljZSIsImFwcGx5IiwicmVhbFR5cGVPZiIsInN1YmplY3QiLCJ0eXBlIiwiTWF0aCIsImlzQXJyYXkiLCJ0ZXN0IiwiZGVlcERpZmYiLCJsaHMiLCJyaHMiLCJjaGFuZ2VzIiwicHJlZmlsdGVyIiwia2V5Iiwic3RhY2siLCJjdXJyZW50UGF0aCIsIm5vcm1hbGl6ZSIsImFsdCIsImx0eXBlIiwicnR5cGUiLCJpbmRleE9mIiwiaSIsImxlbiIsImFrZXlzIiwia2V5cyIsInBrZXlzIiwiZm9yRWFjaCIsImsiLCJvdGhlciIsImlzTmFOIiwiYWNjdW0iLCJkaWZmIiwiYXBwbHlBcnJheUNoYW5nZSIsImNoYW5nZSIsIml0IiwidSIsImFwcGx5Q2hhbmdlIiwidGFyZ2V0Iiwic291cmNlIiwibGFzdCIsInJldmVydEFycmF5Q2hhbmdlIiwicmV2ZXJ0Q2hhbmdlIiwiYXBwbHlEaWZmIiwiZmlsdGVyIiwib25DaGFuZ2UiLCJkZWZpbmVQcm9wZXJ0aWVzIiwib2JzZXJ2YWJsZURpZmYiLCJpc0NvbmZsaWN0Iiwibm9Db25mbGljdCIsIl90eXBlb2YiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm9iaiIsInByaW50QnVmZmVyIiwiX2hlbHBlcnMiLCJyZXF1aXJlIiwiX2RpZmYiLCJfZGlmZjIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIyIiwiZ2V0TG9nTGV2ZWwiLCJsZXZlbCIsImFjdGlvbiIsInBheWxvYWQiLCJkZWZhdWx0VGl0bGVGb3JtYXR0ZXIiLCJvcHRpb25zIiwidGltZXN0YW1wIiwiZHVyYXRpb24iLCJ0b29rIiwicGFydHMiLCJTdHJpbmciLCJ0b0ZpeGVkIiwiYnVmZmVyIiwibG9nZ2VyIiwiYWN0aW9uVHJhbnNmb3JtZXIiLCJfb3B0aW9ucyR0aXRsZUZvcm1hdHQiLCJ0aXRsZUZvcm1hdHRlciIsImNvbGxhcHNlZCIsImNvbG9ycyIsImxvZ0VudHJ5Iiwic3RhcnRlZCIsInN0YXJ0ZWRUaW1lIiwicHJldlN0YXRlIiwiZXJyb3IiLCJuZXh0U3RhdGUiLCJuZXh0RW50cnkiLCJmb3JtYXR0ZWRBY3Rpb24iLCJpc0NvbGxhcHNlZCIsImZvcm1hdHRlZFRpbWUiLCJ0aXRsZUNTUyIsInRpdGxlIiwiZ3JvdXBDb2xsYXBzZWQiLCJncm91cCIsImUiLCJsb2ciLCJwcmV2U3RhdGVMZXZlbCIsImFjdGlvbkxldmVsIiwiZXJyb3JMZXZlbCIsIm5leHRTdGF0ZUxldmVsIiwiZ3JvdXBFbmQiLCJjb25zb2xlIiwibG9nRXJyb3JzIiwicHJlZGljYXRlIiwic3RhdGVUcmFuc2Zvcm1lciIsInN0YXRlIiwiZXJyb3JUcmFuc2Zvcm1lciIsImRpZmZQcmVkaWNhdGUiLCJ0cmFuc2Zvcm1lciIsImRpZmZMb2dnZXIiLCJfZGVlcERpZmYiLCJfZGVlcERpZmYyIiwiZGljdGlvbmFyeSIsImNvbG9yIiwidGV4dCIsInN0eWxlIiwicmVuZGVyIiwibmV3U3RhdGUiLCJlbGVtIiwib3V0cHV0IiwiY29uY2F0IiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJhcmd1bWVudHMiLCJoYXNPd25Qcm9wZXJ0eSIsIl9jb3JlIiwiX2RlZmF1bHRzIiwiX2RlZmF1bHRzMiIsImNyZWF0ZUxvZ2dlciIsImxvZ2dlck9wdGlvbnMiLCJuZXh0IiwiZ2V0U3RhdGUiLCJkaXNwYXRjaCIsImxvZ0J1ZmZlciIsIl9yZWYiLCJyZXR1cm5lZFZhbHVlIiwiY3JlYXRlVGh1bmtNaWRkbGV3YXJlIiwiZXh0cmFBcmd1bWVudCIsInRodW5rIiwid2l0aEV4dHJhQXJndW1lbnQiXSwibWFwcGluZ3MiOiI7Ozs7OztBQUFBOztBQUVBQSxPQUFPQyxjQUFQLENBQXNCQyxPQUF0QixFQUErQixZQUEvQixFQUE2QztBQUMzQ0MsU0FBTztBQURvQyxDQUE3QztBQUdBLElBQUlDLFNBQVNGLFFBQVFFLE1BQVIsR0FBaUIsU0FBU0EsTUFBVCxDQUFnQkMs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QUFvQixNQUFNSixTQUFTSSxLQUFmO0FBQ3BCLGVBQU9tRCxhQUFQO0FBQ0QsT0FuQ0Q7QUFvQ0QsS0FyQ0Q7QUFzQ0QsR0F4Q0Q7QUF5Q0Q7O0FBRUR0TSxRQUFReUgsT0FBUixHQUFrQnNFLFlBQWxCO0FBQ0F0SyxPQUFPekIsT0FBUCxHQUFpQkEsUUFBUSxTQUFSLENBQWpCLEM7Ozs7Ozs7O0FDOUhBOztBQUVBQSxRQUFRd0gsVUFBUixHQUFxQixJQUFyQjtBQUNBLFNBQVMrRSxxQkFBVCxDQUErQkMsYUFBL0IsRUFBOEM7QUFDNUMsU0FBTyxVQUFVSCxJQUFWLEVBQWdCO0FBQ3JCLFFBQUlGLFdBQVdFLEtBQUtGLFFBQXBCO0FBQUEsUUFDSUQsV0FBV0csS0FBS0gsUUFEcEI7QUFFQSxXQUFPLFVBQVVELElBQVYsRUFBZ0I7QUFDckIsYUFBTyxVQUFVbkUsTUFBVixFQUFrQjtBQUN2QixZQUFJLE9BQU9BLE1BQVAsS0FBa0IsVUFBdEIsRUFBa0M7QUFDaEMsaUJBQU9BLE9BQU9xRSxRQUFQLEVBQWlCRCxRQUFqQixFQUEyQk0sYUFBM0IsQ0FBUDtBQUNEOztBQUVELGVBQU9QLEtBQUtuRSxNQUFMLENBQVA7QUFDRCxPQU5EO0FBT0QsS0FSRDtBQVNELEdBWkQ7QUFhRDs7QUFFRCxJQUFJMkUsUUFBUUYsdUJBQVo7QUFDQUUsTUFBTUMsaUJBQU4sR0FBMEJILHFCQUExQjs7QUFFQXZNLFFBQVEsU0FBUixJQUFxQnlNLEtBQXJCLEMiLCJmaWxlIjoiLi9qcy92ZW5kb3JfcmVkdXhfYWRkb24ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG52YXIgcmVwZWF0ID0gZXhwb3J0cy5yZXBlYXQgPSBmdW5jdGlvbiByZXBlYXQoc3RyLCB0aW1lcykge1xuICByZXR1cm4gbmV3IEFycmF5KHRpbWVzICsgMSkuam9pbihzdHIpO1xufTtcblxudmFyIHBhZCA9IGV4cG9ydHMucGFkID0gZnVuY3Rpb24gcGFkKG51bSwgbWF4TGVuZ3RoKSB7XG4gIHJldHVybiByZXBlYXQoXCIwXCIsIG1heExlbmd0aCAtIG51bS50b1N0cmluZygpLmxlbmd0aCkgKyBudW07XG59O1xuXG52YXIgZm9ybWF0VGltZSA9IGV4cG9ydHMuZm9ybWF0VGltZSA9IGZ1bmN0aW9uIGZvcm1hdFRpbWUodGltZSkge1xuICByZXR1cm4gcGFkKHRpbWUuZ2V0SG91cnMoKSwgMikgKyBcIjpcIiArIHBhZCh0aW1lLmdldE1pbnV0ZXMoKSwgMikgKyBcIjpcIiArIHBhZCh0aW1lLmdldFNlY29uZHMoKSwgMikgKyBcIi5cIiArIHBhZCh0aW1lLmdldE1pbGxpc2Vjb25kcygpLCAzKTtcbn07XG5cbi8vIFVzZSBwZXJmb3JtYW5jZSBBUEkgaWYgaXQncyBhdmFpbGFibGUgaW4gb3JkZXIgdG8gZ2V0IGJldHRlciBwcmVjaXNpb25cbnZhciB0aW1lciA9IGV4cG9ydHMudGltZXIgPSB0eXBlb2YgcGVyZm9ybWFuY2UgIT09IFwidW5kZWZpbmVkXCIgJiYgcGVyZm9ybWFuY2UgIT09IG51bGwgJiYgdHlwZW9mIHBlcmZvcm1hbmNlLm5vdyA9PT0gXCJmdW5jdGlvblwiID8gcGVyZm9ybWFuY2UgOiBEYXRlO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVkdXgtbG9nZ2VyL2xpYi9oZWxwZXJzLmpzIiwiLyohXG4gKiBkZWVwLWRpZmYuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbjsoZnVuY3Rpb24ocm9vdCwgZmFjdG9yeSkge1xuICAndXNlIHN0cmljdCc7XG4gIGlmICh0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpIHtcbiAgICAvLyBBTUQuIFJlZ2lzdGVyIGFzIGFuIGFub255bW91cyBtb2R1bGUuXG4gICAgZGVmaW5lKFtdLCBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5KCk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKSB7XG4gICAgLy8gTm9kZS4gRG9lcyBub3Qgd29yayB3aXRoIHN0cmljdCBDb21tb25KUywgYnV0XG4gICAgLy8gb25seSBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB0aGF0IHN1cHBvcnQgbW9kdWxlLmV4cG9ydHMsXG4gICAgLy8gbGlrZSBOb2RlLlxuICAgIG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpO1xuICB9IGVsc2Uge1xuICAgIC8vIEJyb3dzZXIgZ2xvYmFscyAocm9vdCBpcyB3aW5kb3cpXG4gICAgcm9vdC5EZWVwRGlmZiA9IGZhY3RvcnkoKTtcbiAgfVxufSh0aGlzLCBmdW5jdGlvbih1bmRlZmluZWQpIHtcbiAgJ3VzZSBzdHJpY3QnO1xuXG4gIHZhciAkc2NvcGUsIGNvbmZsaWN0LCBjb25mbGljdFJlc29sdXRpb24gPSBbXTtcbiAgaWYgKHR5cGVvZiBnbG9iYWwgPT09ICdvYmplY3QnICYmIGdsb2JhbCkge1xuICAgICRzY29wZSA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgICRzY29wZSA9IHdpbmRvdztcbiAgfSBlbHNlIHtcbiAgICAkc2NvcGUgPSB7fTtcbiAgfVxuICBjb25mbGljdCA9ICRzY29wZS5EZWVwRGlmZjtcbiAgaWYgKGNvbmZsaWN0KSB7XG4gICAgY29uZmxpY3RSZXNvbHV0aW9uLnB1c2goXG4gICAgICBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKCd1bmRlZmluZWQnICE9PSB0eXBlb2YgY29uZmxpY3QgJiYgJHNjb3BlLkRlZXBEaWZmID09PSBhY2N1bXVsYXRlRGlmZikge1xuICAgICAgICAgICRzY29wZS5EZWVwRGlmZiA9IGNvbmZsaWN0O1xuICAgICAgICAgIGNvbmZsaWN0ID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIC8vIG5vZGVqcyBjb21wYXRpYmxlIG9uIHNlcnZlciBzaWRlIGFuZCBpbiB0aGUgYnJvd3Nlci5cbiAgZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3I7XG4gICAgY3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ3Rvci5wcm90b3R5cGUsIHtcbiAgICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gRGlmZihraW5kLCBwYXRoKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdraW5kJywge1xuICAgICAgdmFsdWU6IGtpbmQsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgaWYgKHBhdGggJiYgcGF0aC5sZW5ndGgpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAncGF0aCcsIHtcbiAgICAgICAgdmFsdWU6IHBhdGgsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIERpZmZFZGl0KHBhdGgsIG9yaWdpbiwgdmFsdWUpIHtcbiAgICBEaWZmRWRpdC5zdXBlcl8uY2FsbCh0aGlzLCAnRScsIHBhdGgpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnbGhzJywge1xuICAgICAgdmFsdWU6IG9yaWdpbixcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JocycsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICBpbmhlcml0cyhEaWZmRWRpdCwgRGlmZik7XG5cbiAgZnVuY3Rpb24gRGlmZk5ldyhwYXRoLCB2YWx1ZSkge1xuICAgIERpZmZOZXcuc3VwZXJfLmNhbGwodGhpcywgJ04nLCBwYXRoKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3JocycsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuICBpbmhlcml0cyhEaWZmTmV3LCBEaWZmKTtcblxuICBmdW5jdGlvbiBEaWZmRGVsZXRlZChwYXRoLCB2YWx1ZSkge1xuICAgIERpZmZEZWxldGVkLnN1cGVyXy5jYWxsKHRoaXMsICdEJywgcGF0aCk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdsaHMnLCB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgaW5oZXJpdHMoRGlmZkRlbGV0ZWQsIERpZmYpO1xuXG4gIGZ1bmN0aW9uIERpZmZBcnJheShwYXRoLCBpbmRleCwgaXRlbSkge1xuICAgIERpZmZBcnJheS5zdXBlcl8uY2FsbCh0aGlzLCAnQScsIHBhdGgpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnaW5kZXgnLCB7XG4gICAgICB2YWx1ZTogaW5kZXgsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdpdGVtJywge1xuICAgICAgdmFsdWU6IGl0ZW0sXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgaW5oZXJpdHMoRGlmZkFycmF5LCBEaWZmKTtcblxuICBmdW5jdGlvbiBhcnJheVJlbW92ZShhcnIsIGZyb20sIHRvKSB7XG4gICAgdmFyIHJlc3QgPSBhcnIuc2xpY2UoKHRvIHx8IGZyb20pICsgMSB8fCBhcnIubGVuZ3RoKTtcbiAgICBhcnIubGVuZ3RoID0gZnJvbSA8IDAgPyBhcnIubGVuZ3RoICsgZnJvbSA6IGZyb207XG4gICAgYXJyLnB1c2guYXBwbHkoYXJyLCByZXN0KTtcbiAgICByZXR1cm4gYXJyO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVhbFR5cGVPZihzdWJqZWN0KSB7XG4gICAgdmFyIHR5cGUgPSB0eXBlb2Ygc3ViamVjdDtcbiAgICBpZiAodHlwZSAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiB0eXBlO1xuICAgIH1cblxuICAgIGlmIChzdWJqZWN0ID09PSBNYXRoKSB7XG4gICAgICByZXR1cm4gJ21hdGgnO1xuICAgIH0gZWxzZSBpZiAoc3ViamVjdCA9PT0gbnVsbCkge1xuICAgICAgcmV0dXJuICdudWxsJztcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoc3ViamVjdCkpIHtcbiAgICAgIHJldHVybiAnYXJyYXknO1xuICAgIH0gZWxzZSBpZiAoT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN1YmplY3QpID09PSAnW29iamVjdCBEYXRlXScpIHtcbiAgICAgIHJldHVybiAnZGF0ZSc7XG4gICAgfSBlbHNlIGlmICh0eXBlb2Ygc3ViamVjdC50b1N0cmluZyAhPT0gJ3VuZGVmaW5lZCcgJiYgL15cXC8uKlxcLy8udGVzdChzdWJqZWN0LnRvU3RyaW5nKCkpKSB7XG4gICAgICByZXR1cm4gJ3JlZ2V4cCc7XG4gICAgfVxuICAgIHJldHVybiAnb2JqZWN0JztcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZXBEaWZmKGxocywgcmhzLCBjaGFuZ2VzLCBwcmVmaWx0ZXIsIHBhdGgsIGtleSwgc3RhY2spIHtcbiAgICBwYXRoID0gcGF0aCB8fCBbXTtcbiAgICB2YXIgY3VycmVudFBhdGggPSBwYXRoLnNsaWNlKDApO1xuICAgIGlmICh0eXBlb2Yga2V5ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgaWYgKHByZWZpbHRlcikge1xuICAgICAgICBpZiAodHlwZW9mKHByZWZpbHRlcikgPT09ICdmdW5jdGlvbicgJiYgcHJlZmlsdGVyKGN1cnJlbnRQYXRoLCBrZXkpKSB7IHJldHVybjsgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YocHJlZmlsdGVyKSA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgICBpZiAocHJlZmlsdGVyLnByZWZpbHRlciAmJiBwcmVmaWx0ZXIucHJlZmlsdGVyKGN1cnJlbnRQYXRoLCBrZXkpKSB7IHJldHVybjsgfVxuICAgICAgICAgIGlmIChwcmVmaWx0ZXIubm9ybWFsaXplKSB7XG4gICAgICAgICAgICB2YXIgYWx0ID0gcHJlZmlsdGVyLm5vcm1hbGl6ZShjdXJyZW50UGF0aCwga2V5LCBsaHMsIHJocyk7XG4gICAgICAgICAgICBpZiAoYWx0KSB7XG4gICAgICAgICAgICAgIGxocyA9IGFsdFswXTtcbiAgICAgICAgICAgICAgcmhzID0gYWx0WzFdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY3VycmVudFBhdGgucHVzaChrZXkpO1xuICAgIH1cblxuICAgIC8vIFVzZSBzdHJpbmcgY29tcGFyaXNvbiBmb3IgcmVnZXhlc1xuICAgIGlmIChyZWFsVHlwZU9mKGxocykgPT09ICdyZWdleHAnICYmIHJlYWxUeXBlT2YocmhzKSA9PT0gJ3JlZ2V4cCcpIHtcbiAgICAgIGxocyA9IGxocy50b1N0cmluZygpO1xuICAgICAgcmhzID0gcmhzLnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgdmFyIGx0eXBlID0gdHlwZW9mIGxocztcbiAgICB2YXIgcnR5cGUgPSB0eXBlb2YgcmhzO1xuICAgIGlmIChsdHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGlmIChydHlwZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgY2hhbmdlcyhuZXcgRGlmZk5ldyhjdXJyZW50UGF0aCwgcmhzKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChydHlwZSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNoYW5nZXMobmV3IERpZmZEZWxldGVkKGN1cnJlbnRQYXRoLCBsaHMpKTtcbiAgICB9IGVsc2UgaWYgKHJlYWxUeXBlT2YobGhzKSAhPT0gcmVhbFR5cGVPZihyaHMpKSB7XG4gICAgICBjaGFuZ2VzKG5ldyBEaWZmRWRpdChjdXJyZW50UGF0aCwgbGhzLCByaHMpKTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChsaHMpID09PSAnW29iamVjdCBEYXRlXScgJiYgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHJocykgPT09ICdbb2JqZWN0IERhdGVdJyAmJiAoKGxocyAtIHJocykgIT09IDApKSB7XG4gICAgICBjaGFuZ2VzKG5ldyBEaWZmRWRpdChjdXJyZW50UGF0aCwgbGhzLCByaHMpKTtcbiAgICB9IGVsc2UgaWYgKGx0eXBlID09PSAnb2JqZWN0JyAmJiBsaHMgIT09IG51bGwgJiYgcmhzICE9PSBudWxsKSB7XG4gICAgICBzdGFjayA9IHN0YWNrIHx8IFtdO1xuICAgICAgaWYgKHN0YWNrLmluZGV4T2YobGhzKSA8IDApIHtcbiAgICAgICAgc3RhY2sucHVzaChsaHMpO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShsaHMpKSB7XG4gICAgICAgICAgdmFyIGksIGxlbiA9IGxocy5sZW5ndGg7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxocy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGkgPj0gcmhzLmxlbmd0aCkge1xuICAgICAgICAgICAgICBjaGFuZ2VzKG5ldyBEaWZmQXJyYXkoY3VycmVudFBhdGgsIGksIG5ldyBEaWZmRGVsZXRlZCh1bmRlZmluZWQsIGxoc1tpXSkpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGRlZXBEaWZmKGxoc1tpXSwgcmhzW2ldLCBjaGFuZ2VzLCBwcmVmaWx0ZXIsIGN1cnJlbnRQYXRoLCBpLCBzdGFjayk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHdoaWxlIChpIDwgcmhzLmxlbmd0aCkge1xuICAgICAgICAgICAgY2hhbmdlcyhuZXcgRGlmZkFycmF5KGN1cnJlbnRQYXRoLCBpLCBuZXcgRGlmZk5ldyh1bmRlZmluZWQsIHJoc1tpKytdKSkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgYWtleXMgPSBPYmplY3Qua2V5cyhsaHMpO1xuICAgICAgICAgIHZhciBwa2V5cyA9IE9iamVjdC5rZXlzKHJocyk7XG4gICAgICAgICAgYWtleXMuZm9yRWFjaChmdW5jdGlvbihrLCBpKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBwa2V5cy5pbmRleE9mKGspO1xuICAgICAgICAgICAgaWYgKG90aGVyID49IDApIHtcbiAgICAgICAgICAgICAgZGVlcERpZmYobGhzW2tdLCByaHNba10sIGNoYW5nZXMsIHByZWZpbHRlciwgY3VycmVudFBhdGgsIGssIHN0YWNrKTtcbiAgICAgICAgICAgICAgcGtleXMgPSBhcnJheVJlbW92ZShwa2V5cywgb3RoZXIpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgZGVlcERpZmYobGhzW2tdLCB1bmRlZmluZWQsIGNoYW5nZXMsIHByZWZpbHRlciwgY3VycmVudFBhdGgsIGssIHN0YWNrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICBwa2V5cy5mb3JFYWNoKGZ1bmN0aW9uKGspIHtcbiAgICAgICAgICAgIGRlZXBEaWZmKHVuZGVmaW5lZCwgcmhzW2tdLCBjaGFuZ2VzLCBwcmVmaWx0ZXIsIGN1cnJlbnRQYXRoLCBrLCBzdGFjayk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgc3RhY2subGVuZ3RoID0gc3RhY2subGVuZ3RoIC0gMTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxocyAhPT0gcmhzKSB7XG4gICAgICBpZiAoIShsdHlwZSA9PT0gJ251bWJlcicgJiYgaXNOYU4obGhzKSAmJiBpc05hTihyaHMpKSkge1xuICAgICAgICBjaGFuZ2VzKG5ldyBEaWZmRWRpdChjdXJyZW50UGF0aCwgbGhzLCByaHMpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhY2N1bXVsYXRlRGlmZihsaHMsIHJocywgcHJlZmlsdGVyLCBhY2N1bSkge1xuICAgIGFjY3VtID0gYWNjdW0gfHwgW107XG4gICAgZGVlcERpZmYobGhzLCByaHMsXG4gICAgICBmdW5jdGlvbihkaWZmKSB7XG4gICAgICAgIGlmIChkaWZmKSB7XG4gICAgICAgICAgYWNjdW0ucHVzaChkaWZmKTtcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIHByZWZpbHRlcik7XG4gICAgcmV0dXJuIChhY2N1bS5sZW5ndGgpID8gYWNjdW0gOiB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseUFycmF5Q2hhbmdlKGFyciwgaW5kZXgsIGNoYW5nZSkge1xuICAgIGlmIChjaGFuZ2UucGF0aCAmJiBjaGFuZ2UucGF0aC5sZW5ndGgpIHtcbiAgICAgIHZhciBpdCA9IGFycltpbmRleF0sXG4gICAgICAgICAgaSwgdSA9IGNoYW5nZS5wYXRoLmxlbmd0aCAtIDE7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdTsgaSsrKSB7XG4gICAgICAgIGl0ID0gaXRbY2hhbmdlLnBhdGhbaV1dO1xuICAgICAgfVxuICAgICAgc3dpdGNoIChjaGFuZ2Uua2luZCkge1xuICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICBhcHBseUFycmF5Q2hhbmdlKGl0W2NoYW5nZS5wYXRoW2ldXSwgY2hhbmdlLmluZGV4LCBjaGFuZ2UuaXRlbSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgIGRlbGV0ZSBpdFtjaGFuZ2UucGF0aFtpXV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICBpdFtjaGFuZ2UucGF0aFtpXV0gPSBjaGFuZ2UucmhzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzd2l0Y2ggKGNoYW5nZS5raW5kKSB7XG4gICAgICAgIGNhc2UgJ0EnOlxuICAgICAgICAgIGFwcGx5QXJyYXlDaGFuZ2UoYXJyW2luZGV4XSwgY2hhbmdlLmluZGV4LCBjaGFuZ2UuaXRlbSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgIGFyciA9IGFycmF5UmVtb3ZlKGFyciwgaW5kZXgpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgY2FzZSAnTic6XG4gICAgICAgICAgYXJyW2luZGV4XSA9IGNoYW5nZS5yaHM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBhcnI7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseUNoYW5nZSh0YXJnZXQsIHNvdXJjZSwgY2hhbmdlKSB7XG4gICAgaWYgKHRhcmdldCAmJiBzb3VyY2UgJiYgY2hhbmdlICYmIGNoYW5nZS5raW5kKSB7XG4gICAgICB2YXIgaXQgPSB0YXJnZXQsXG4gICAgICAgICAgaSA9IC0xLFxuICAgICAgICAgIGxhc3QgPSBjaGFuZ2UucGF0aCA/IGNoYW5nZS5wYXRoLmxlbmd0aCAtIDEgOiAwO1xuICAgICAgd2hpbGUgKCsraSA8IGxhc3QpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpdFtjaGFuZ2UucGF0aFtpXV0gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgaXRbY2hhbmdlLnBhdGhbaV1dID0gKHR5cGVvZiBjaGFuZ2UucGF0aFtpXSA9PT0gJ251bWJlcicpID8gW10gOiB7fTtcbiAgICAgICAgfVxuICAgICAgICBpdCA9IGl0W2NoYW5nZS5wYXRoW2ldXTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoY2hhbmdlLmtpbmQpIHtcbiAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgYXBwbHlBcnJheUNoYW5nZShjaGFuZ2UucGF0aCA/IGl0W2NoYW5nZS5wYXRoW2ldXSA6IGl0LCBjaGFuZ2UuaW5kZXgsIGNoYW5nZS5pdGVtKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgZGVsZXRlIGl0W2NoYW5nZS5wYXRoW2ldXTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRSc6XG4gICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgIGl0W2NoYW5nZS5wYXRoW2ldXSA9IGNoYW5nZS5yaHM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0QXJyYXlDaGFuZ2UoYXJyLCBpbmRleCwgY2hhbmdlKSB7XG4gICAgaWYgKGNoYW5nZS5wYXRoICYmIGNoYW5nZS5wYXRoLmxlbmd0aCkge1xuICAgICAgLy8gdGhlIHN0cnVjdHVyZSBvZiB0aGUgb2JqZWN0IGF0IHRoZSBpbmRleCBoYXMgY2hhbmdlZC4uLlxuICAgICAgdmFyIGl0ID0gYXJyW2luZGV4XSxcbiAgICAgICAgICBpLCB1ID0gY2hhbmdlLnBhdGgubGVuZ3RoIC0gMTtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCB1OyBpKyspIHtcbiAgICAgICAgaXQgPSBpdFtjaGFuZ2UucGF0aFtpXV07XG4gICAgICB9XG4gICAgICBzd2l0Y2ggKGNoYW5nZS5raW5kKSB7XG4gICAgICAgIGNhc2UgJ0EnOlxuICAgICAgICAgIHJldmVydEFycmF5Q2hhbmdlKGl0W2NoYW5nZS5wYXRoW2ldXSwgY2hhbmdlLmluZGV4LCBjaGFuZ2UuaXRlbSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgIGl0W2NoYW5nZS5wYXRoW2ldXSA9IGNoYW5nZS5saHM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICAgIGl0W2NoYW5nZS5wYXRoW2ldXSA9IGNoYW5nZS5saHM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ04nOlxuICAgICAgICAgIGRlbGV0ZSBpdFtjaGFuZ2UucGF0aFtpXV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRoZSBhcnJheSBpdGVtIGlzIGRpZmZlcmVudC4uLlxuICAgICAgc3dpdGNoIChjaGFuZ2Uua2luZCkge1xuICAgICAgICBjYXNlICdBJzpcbiAgICAgICAgICByZXZlcnRBcnJheUNoYW5nZShhcnJbaW5kZXhdLCBjaGFuZ2UuaW5kZXgsIGNoYW5nZS5pdGVtKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnRCc6XG4gICAgICAgICAgYXJyW2luZGV4XSA9IGNoYW5nZS5saHM7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0UnOlxuICAgICAgICAgIGFycltpbmRleF0gPSBjaGFuZ2UubGhzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICBhcnIgPSBhcnJheVJlbW92ZShhcnIsIGluZGV4KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGFycjtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydENoYW5nZSh0YXJnZXQsIHNvdXJjZSwgY2hhbmdlKSB7XG4gICAgaWYgKHRhcmdldCAmJiBzb3VyY2UgJiYgY2hhbmdlICYmIGNoYW5nZS5raW5kKSB7XG4gICAgICB2YXIgaXQgPSB0YXJnZXQsXG4gICAgICAgICAgaSwgdTtcbiAgICAgIHUgPSBjaGFuZ2UucGF0aC5sZW5ndGggLSAxO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHU7IGkrKykge1xuICAgICAgICBpZiAodHlwZW9mIGl0W2NoYW5nZS5wYXRoW2ldXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICBpdFtjaGFuZ2UucGF0aFtpXV0gPSB7fTtcbiAgICAgICAgfVxuICAgICAgICBpdCA9IGl0W2NoYW5nZS5wYXRoW2ldXTtcbiAgICAgIH1cbiAgICAgIHN3aXRjaCAoY2hhbmdlLmtpbmQpIHtcbiAgICAgICAgY2FzZSAnQSc6XG4gICAgICAgICAgLy8gQXJyYXkgd2FzIG1vZGlmaWVkLi4uXG4gICAgICAgICAgLy8gaXQgd2lsbCBiZSBhbiBhcnJheS4uLlxuICAgICAgICAgIHJldmVydEFycmF5Q2hhbmdlKGl0W2NoYW5nZS5wYXRoW2ldXSwgY2hhbmdlLmluZGV4LCBjaGFuZ2UuaXRlbSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ0QnOlxuICAgICAgICAgIC8vIEl0ZW0gd2FzIGRlbGV0ZWQuLi5cbiAgICAgICAgICBpdFtjaGFuZ2UucGF0aFtpXV0gPSBjaGFuZ2UubGhzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdFJzpcbiAgICAgICAgICAvLyBJdGVtIHdhcyBlZGl0ZWQuLi5cbiAgICAgICAgICBpdFtjaGFuZ2UucGF0aFtpXV0gPSBjaGFuZ2UubGhzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdOJzpcbiAgICAgICAgICAvLyBJdGVtIGlzIG5ldy4uLlxuICAgICAgICAgIGRlbGV0ZSBpdFtjaGFuZ2UucGF0aFtpXV07XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlEaWZmKHRhcmdldCwgc291cmNlLCBmaWx0ZXIpIHtcbiAgICBpZiAodGFyZ2V0ICYmIHNvdXJjZSkge1xuICAgICAgdmFyIG9uQ2hhbmdlID0gZnVuY3Rpb24oY2hhbmdlKSB7XG4gICAgICAgIGlmICghZmlsdGVyIHx8IGZpbHRlcih0YXJnZXQsIHNvdXJjZSwgY2hhbmdlKSkge1xuICAgICAgICAgIGFwcGx5Q2hhbmdlKHRhcmdldCwgc291cmNlLCBjaGFuZ2UpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgZGVlcERpZmYodGFyZ2V0LCBzb3VyY2UsIG9uQ2hhbmdlKTtcbiAgICB9XG4gIH1cblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyhhY2N1bXVsYXRlRGlmZiwge1xuXG4gICAgZGlmZjoge1xuICAgICAgdmFsdWU6IGFjY3VtdWxhdGVEaWZmLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0sXG4gICAgb2JzZXJ2YWJsZURpZmY6IHtcbiAgICAgIHZhbHVlOiBkZWVwRGlmZixcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIGFwcGx5RGlmZjoge1xuICAgICAgdmFsdWU6IGFwcGx5RGlmZixcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIGFwcGx5Q2hhbmdlOiB7XG4gICAgICB2YWx1ZTogYXBwbHlDaGFuZ2UsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICByZXZlcnRDaGFuZ2U6IHtcbiAgICAgIHZhbHVlOiByZXZlcnRDaGFuZ2UsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlXG4gICAgfSxcbiAgICBpc0NvbmZsaWN0OiB7XG4gICAgICB2YWx1ZTogZnVuY3Rpb24oKSB7XG4gICAgICAgIHJldHVybiAndW5kZWZpbmVkJyAhPT0gdHlwZW9mIGNvbmZsaWN0O1xuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9LFxuICAgIG5vQ29uZmxpY3Q6IHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbigpIHtcbiAgICAgICAgaWYgKGNvbmZsaWN0UmVzb2x1dGlvbikge1xuICAgICAgICAgIGNvbmZsaWN0UmVzb2x1dGlvbi5mb3JFYWNoKGZ1bmN0aW9uKGl0KSB7XG4gICAgICAgICAgICBpdCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIGNvbmZsaWN0UmVzb2x1dGlvbiA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFjY3VtdWxhdGVEaWZmO1xuICAgICAgfSxcbiAgICAgIGVudW1lcmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBhY2N1bXVsYXRlRGlmZjtcbn0pKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vZGVlcC1kaWZmL2luZGV4LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydHMucHJpbnRCdWZmZXIgPSBwcmludEJ1ZmZlcjtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG5cbnZhciBfZGlmZiA9IHJlcXVpcmUoJy4vZGlmZicpO1xuXG52YXIgX2RpZmYyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGlmZik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF90b0NvbnN1bWFibGVBcnJheShhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyBmb3IgKHZhciBpID0gMCwgYXJyMiA9IEFycmF5KGFyci5sZW5ndGgpOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH0gZWxzZSB7IHJldHVybiBBcnJheS5mcm9tKGFycik7IH0gfVxuXG4vKipcbiAqIEdldCBsb2cgbGV2ZWwgc3RyaW5nIGJhc2VkIG9uIHN1cHBsaWVkIHBhcmFtc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nIHwgZnVuY3Rpb24gfCBvYmplY3R9IGxldmVsIC0gY29uc29sZVtsZXZlbF1cbiAqIEBwYXJhbSB7b2JqZWN0fSBhY3Rpb24gLSBzZWxlY3RlZCBhY3Rpb25cbiAqIEBwYXJhbSB7YXJyYXl9IHBheWxvYWQgLSBzZWxlY3RlZCBwYXlsb2FkXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIGxvZyBlbnRyeSB0eXBlXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gbGV2ZWxcbiAqL1xuZnVuY3Rpb24gZ2V0TG9nTGV2ZWwobGV2ZWwsIGFjdGlvbiwgcGF5bG9hZCwgdHlwZSkge1xuICBzd2l0Y2ggKHR5cGVvZiBsZXZlbCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YobGV2ZWwpKSB7XG4gICAgY2FzZSAnb2JqZWN0JzpcbiAgICAgIHJldHVybiB0eXBlb2YgbGV2ZWxbdHlwZV0gPT09ICdmdW5jdGlvbicgPyBsZXZlbFt0eXBlXS5hcHBseShsZXZlbCwgX3RvQ29uc3VtYWJsZUFycmF5KHBheWxvYWQpKSA6IGxldmVsW3R5cGVdO1xuICAgIGNhc2UgJ2Z1bmN0aW9uJzpcbiAgICAgIHJldHVybiBsZXZlbChhY3Rpb24pO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gbGV2ZWw7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVmYXVsdFRpdGxlRm9ybWF0dGVyKG9wdGlvbnMpIHtcbiAgdmFyIHRpbWVzdGFtcCA9IG9wdGlvbnMudGltZXN0YW1wLFxuICAgICAgZHVyYXRpb24gPSBvcHRpb25zLmR1cmF0aW9uO1xuXG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24sIHRpbWUsIHRvb2spIHtcbiAgICB2YXIgcGFydHMgPSBbJ2FjdGlvbiddO1xuXG4gICAgaWYgKHRpbWVzdGFtcCkgcGFydHMucHVzaCgnQCAnICsgdGltZSk7XG4gICAgcGFydHMucHVzaChTdHJpbmcoYWN0aW9uLnR5cGUpKTtcbiAgICBpZiAoZHVyYXRpb24pIHBhcnRzLnB1c2goJyhpbiAnICsgdG9vay50b0ZpeGVkKDIpICsgJyBtcyknKTtcblxuICAgIHJldHVybiBwYXJ0cy5qb2luKCcgJyk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByaW50QnVmZmVyKGJ1ZmZlciwgb3B0aW9ucykge1xuICB2YXIgbG9nZ2VyID0gb3B0aW9ucy5sb2dnZXIsXG4gICAgICBhY3Rpb25UcmFuc2Zvcm1lciA9IG9wdGlvbnMuYWN0aW9uVHJhbnNmb3JtZXIsXG4gICAgICBfb3B0aW9ucyR0aXRsZUZvcm1hdHQgPSBvcHRpb25zLnRpdGxlRm9ybWF0dGVyLFxuICAgICAgdGl0bGVGb3JtYXR0ZXIgPSBfb3B0aW9ucyR0aXRsZUZvcm1hdHQgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRUaXRsZUZvcm1hdHRlcihvcHRpb25zKSA6IF9vcHRpb25zJHRpdGxlRm9ybWF0dCxcbiAgICAgIGNvbGxhcHNlZCA9IG9wdGlvbnMuY29sbGFwc2VkLFxuICAgICAgY29sb3JzID0gb3B0aW9ucy5jb2xvcnMsXG4gICAgICBsZXZlbCA9IG9wdGlvbnMubGV2ZWwsXG4gICAgICBkaWZmID0gb3B0aW9ucy5kaWZmO1xuXG5cbiAgYnVmZmVyLmZvckVhY2goZnVuY3Rpb24gKGxvZ0VudHJ5LCBrZXkpIHtcbiAgICB2YXIgc3RhcnRlZCA9IGxvZ0VudHJ5LnN0YXJ0ZWQsXG4gICAgICAgIHN0YXJ0ZWRUaW1lID0gbG9nRW50cnkuc3RhcnRlZFRpbWUsXG4gICAgICAgIGFjdGlvbiA9IGxvZ0VudHJ5LmFjdGlvbixcbiAgICAgICAgcHJldlN0YXRlID0gbG9nRW50cnkucHJldlN0YXRlLFxuICAgICAgICBlcnJvciA9IGxvZ0VudHJ5LmVycm9yO1xuICAgIHZhciB0b29rID0gbG9nRW50cnkudG9vayxcbiAgICAgICAgbmV4dFN0YXRlID0gbG9nRW50cnkubmV4dFN0YXRlO1xuXG4gICAgdmFyIG5leHRFbnRyeSA9IGJ1ZmZlcltrZXkgKyAxXTtcblxuICAgIGlmIChuZXh0RW50cnkpIHtcbiAgICAgIG5leHRTdGF0ZSA9IG5leHRFbnRyeS5wcmV2U3RhdGU7XG4gICAgICB0b29rID0gbmV4dEVudHJ5LnN0YXJ0ZWQgLSBzdGFydGVkO1xuICAgIH1cblxuICAgIC8vIE1lc3NhZ2VcbiAgICB2YXIgZm9ybWF0dGVkQWN0aW9uID0gYWN0aW9uVHJhbnNmb3JtZXIoYWN0aW9uKTtcbiAgICB2YXIgaXNDb2xsYXBzZWQgPSB0eXBlb2YgY29sbGFwc2VkID09PSAnZnVuY3Rpb24nID8gY29sbGFwc2VkKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgfSwgYWN0aW9uLCBsb2dFbnRyeSkgOiBjb2xsYXBzZWQ7XG5cbiAgICB2YXIgZm9ybWF0dGVkVGltZSA9ICgwLCBfaGVscGVycy5mb3JtYXRUaW1lKShzdGFydGVkVGltZSk7XG4gICAgdmFyIHRpdGxlQ1NTID0gY29sb3JzLnRpdGxlID8gJ2NvbG9yOiAnICsgY29sb3JzLnRpdGxlKGZvcm1hdHRlZEFjdGlvbikgKyAnOycgOiBudWxsO1xuICAgIHZhciB0aXRsZSA9IHRpdGxlRm9ybWF0dGVyKGZvcm1hdHRlZEFjdGlvbiwgZm9ybWF0dGVkVGltZSwgdG9vayk7XG5cbiAgICAvLyBSZW5kZXJcbiAgICB0cnkge1xuICAgICAgaWYgKGlzQ29sbGFwc2VkKSB7XG4gICAgICAgIGlmIChjb2xvcnMudGl0bGUpIGxvZ2dlci5ncm91cENvbGxhcHNlZCgnJWMgJyArIHRpdGxlLCB0aXRsZUNTUyk7ZWxzZSBsb2dnZXIuZ3JvdXBDb2xsYXBzZWQodGl0bGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNvbG9ycy50aXRsZSkgbG9nZ2VyLmdyb3VwKCclYyAnICsgdGl0bGUsIHRpdGxlQ1NTKTtlbHNlIGxvZ2dlci5ncm91cCh0aXRsZSk7XG4gICAgICB9XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nZ2VyLmxvZyh0aXRsZSk7XG4gICAgfVxuXG4gICAgdmFyIHByZXZTdGF0ZUxldmVsID0gZ2V0TG9nTGV2ZWwobGV2ZWwsIGZvcm1hdHRlZEFjdGlvbiwgW3ByZXZTdGF0ZV0sICdwcmV2U3RhdGUnKTtcbiAgICB2YXIgYWN0aW9uTGV2ZWwgPSBnZXRMb2dMZXZlbChsZXZlbCwgZm9ybWF0dGVkQWN0aW9uLCBbZm9ybWF0dGVkQWN0aW9uXSwgJ2FjdGlvbicpO1xuICAgIHZhciBlcnJvckxldmVsID0gZ2V0TG9nTGV2ZWwobGV2ZWwsIGZvcm1hdHRlZEFjdGlvbiwgW2Vycm9yLCBwcmV2U3RhdGVdLCAnZXJyb3InKTtcbiAgICB2YXIgbmV4dFN0YXRlTGV2ZWwgPSBnZXRMb2dMZXZlbChsZXZlbCwgZm9ybWF0dGVkQWN0aW9uLCBbbmV4dFN0YXRlXSwgJ25leHRTdGF0ZScpO1xuXG4gICAgaWYgKHByZXZTdGF0ZUxldmVsKSB7XG4gICAgICBpZiAoY29sb3JzLnByZXZTdGF0ZSkgbG9nZ2VyW3ByZXZTdGF0ZUxldmVsXSgnJWMgcHJldiBzdGF0ZScsICdjb2xvcjogJyArIGNvbG9ycy5wcmV2U3RhdGUocHJldlN0YXRlKSArICc7IGZvbnQtd2VpZ2h0OiBib2xkJywgcHJldlN0YXRlKTtlbHNlIGxvZ2dlcltwcmV2U3RhdGVMZXZlbF0oJ3ByZXYgc3RhdGUnLCBwcmV2U3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChhY3Rpb25MZXZlbCkge1xuICAgICAgaWYgKGNvbG9ycy5hY3Rpb24pIGxvZ2dlclthY3Rpb25MZXZlbF0oJyVjIGFjdGlvbicsICdjb2xvcjogJyArIGNvbG9ycy5hY3Rpb24oZm9ybWF0dGVkQWN0aW9uKSArICc7IGZvbnQtd2VpZ2h0OiBib2xkJywgZm9ybWF0dGVkQWN0aW9uKTtlbHNlIGxvZ2dlclthY3Rpb25MZXZlbF0oJ2FjdGlvbicsIGZvcm1hdHRlZEFjdGlvbik7XG4gICAgfVxuXG4gICAgaWYgKGVycm9yICYmIGVycm9yTGV2ZWwpIHtcbiAgICAgIGlmIChjb2xvcnMuZXJyb3IpIGxvZ2dlcltlcnJvckxldmVsXSgnJWMgZXJyb3InLCAnY29sb3I6ICcgKyBjb2xvcnMuZXJyb3IoZXJyb3IsIHByZXZTdGF0ZSkgKyAnOyBmb250LXdlaWdodDogYm9sZCcsIGVycm9yKTtlbHNlIGxvZ2dlcltlcnJvckxldmVsXSgnZXJyb3InLCBlcnJvcik7XG4gICAgfVxuXG4gICAgaWYgKG5leHRTdGF0ZUxldmVsKSB7XG4gICAgICBpZiAoY29sb3JzLm5leHRTdGF0ZSkgbG9nZ2VyW25leHRTdGF0ZUxldmVsXSgnJWMgbmV4dCBzdGF0ZScsICdjb2xvcjogJyArIGNvbG9ycy5uZXh0U3RhdGUobmV4dFN0YXRlKSArICc7IGZvbnQtd2VpZ2h0OiBib2xkJywgbmV4dFN0YXRlKTtlbHNlIGxvZ2dlcltuZXh0U3RhdGVMZXZlbF0oJ25leHQgc3RhdGUnLCBuZXh0U3RhdGUpO1xuICAgIH1cblxuICAgIGlmIChkaWZmKSB7XG4gICAgICAoMCwgX2RpZmYyLmRlZmF1bHQpKHByZXZTdGF0ZSwgbmV4dFN0YXRlLCBsb2dnZXIsIGlzQ29sbGFwc2VkKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgbG9nZ2VyLmdyb3VwRW5kKCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgbG9nZ2VyLmxvZygnXFx1MjAxNFxcdTIwMTQgbG9nIGVuZCBcXHUyMDE0XFx1MjAxNCcpO1xuICAgIH1cbiAgfSk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWR1eC1sb2dnZXIvbGliL2NvcmUuanMiLCJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHtcbiAgbGV2ZWw6IFwibG9nXCIsXG4gIGxvZ2dlcjogY29uc29sZSxcbiAgbG9nRXJyb3JzOiB0cnVlLFxuICBjb2xsYXBzZWQ6IHVuZGVmaW5lZCxcbiAgcHJlZGljYXRlOiB1bmRlZmluZWQsXG4gIGR1cmF0aW9uOiBmYWxzZSxcbiAgdGltZXN0YW1wOiB0cnVlLFxuICBzdGF0ZVRyYW5zZm9ybWVyOiBmdW5jdGlvbiBzdGF0ZVRyYW5zZm9ybWVyKHN0YXRlKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9LFxuICBhY3Rpb25UcmFuc2Zvcm1lcjogZnVuY3Rpb24gYWN0aW9uVHJhbnNmb3JtZXIoYWN0aW9uKSB7XG4gICAgcmV0dXJuIGFjdGlvbjtcbiAgfSxcbiAgZXJyb3JUcmFuc2Zvcm1lcjogZnVuY3Rpb24gZXJyb3JUcmFuc2Zvcm1lcihlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfSxcbiAgY29sb3JzOiB7XG4gICAgdGl0bGU6IGZ1bmN0aW9uIHRpdGxlKCkge1xuICAgICAgcmV0dXJuIFwiaW5oZXJpdFwiO1xuICAgIH0sXG4gICAgcHJldlN0YXRlOiBmdW5jdGlvbiBwcmV2U3RhdGUoKSB7XG4gICAgICByZXR1cm4gXCIjOUU5RTlFXCI7XG4gICAgfSxcbiAgICBhY3Rpb246IGZ1bmN0aW9uIGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBcIiMwM0E5RjRcIjtcbiAgICB9LFxuICAgIG5leHRTdGF0ZTogZnVuY3Rpb24gbmV4dFN0YXRlKCkge1xuICAgICAgcmV0dXJuIFwiIzRDQUY1MFwiO1xuICAgIH0sXG4gICAgZXJyb3I6IGZ1bmN0aW9uIGVycm9yKCkge1xuICAgICAgcmV0dXJuIFwiI0YyMDQwNFwiO1xuICAgIH1cbiAgfSxcbiAgZGlmZjogZmFsc2UsXG4gIGRpZmZQcmVkaWNhdGU6IHVuZGVmaW5lZCxcblxuICAvLyBEZXByZWNhdGVkIG9wdGlvbnNcbiAgdHJhbnNmb3JtZXI6IHVuZGVmaW5lZFxufTtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1tcImRlZmF1bHRcIl07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWR1eC1sb2dnZXIvbGliL2RlZmF1bHRzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZGlmZkxvZ2dlcjtcblxudmFyIF9kZWVwRGlmZiA9IHJlcXVpcmUoJ2RlZXAtZGlmZicpO1xuXG52YXIgX2RlZXBEaWZmMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RlZXBEaWZmKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mbGl0Yml0L2RpZmYjZGlmZmVyZW5jZXNcbnZhciBkaWN0aW9uYXJ5ID0ge1xuICAnRSc6IHtcbiAgICBjb2xvcjogJyMyMTk2RjMnLFxuICAgIHRleHQ6ICdDSEFOR0VEOidcbiAgfSxcbiAgJ04nOiB7XG4gICAgY29sb3I6ICcjNENBRjUwJyxcbiAgICB0ZXh0OiAnQURERUQ6J1xuICB9LFxuICAnRCc6IHtcbiAgICBjb2xvcjogJyNGNDQzMzYnLFxuICAgIHRleHQ6ICdERUxFVEVEOidcbiAgfSxcbiAgJ0EnOiB7XG4gICAgY29sb3I6ICcjMjE5NkYzJyxcbiAgICB0ZXh0OiAnQVJSQVk6J1xuICB9XG59O1xuXG5mdW5jdGlvbiBzdHlsZShraW5kKSB7XG4gIHJldHVybiAnY29sb3I6ICcgKyBkaWN0aW9uYXJ5W2tpbmRdLmNvbG9yICsgJzsgZm9udC13ZWlnaHQ6IGJvbGQnO1xufVxuXG5mdW5jdGlvbiByZW5kZXIoZGlmZikge1xuICB2YXIga2luZCA9IGRpZmYua2luZCxcbiAgICAgIHBhdGggPSBkaWZmLnBhdGgsXG4gICAgICBsaHMgPSBkaWZmLmxocyxcbiAgICAgIHJocyA9IGRpZmYucmhzLFxuICAgICAgaW5kZXggPSBkaWZmLmluZGV4LFxuICAgICAgaXRlbSA9IGRpZmYuaXRlbTtcblxuXG4gIHN3aXRjaCAoa2luZCkge1xuICAgIGNhc2UgJ0UnOlxuICAgICAgcmV0dXJuIFtwYXRoLmpvaW4oJy4nKSwgbGhzLCAnXFx1MjE5MicsIHJoc107XG4gICAgY2FzZSAnTic6XG4gICAgICByZXR1cm4gW3BhdGguam9pbignLicpLCByaHNdO1xuICAgIGNhc2UgJ0QnOlxuICAgICAgcmV0dXJuIFtwYXRoLmpvaW4oJy4nKV07XG4gICAgY2FzZSAnQSc6XG4gICAgICByZXR1cm4gW3BhdGguam9pbignLicpICsgJ1snICsgaW5kZXggKyAnXScsIGl0ZW1dO1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gW107XG4gIH1cbn1cblxuZnVuY3Rpb24gZGlmZkxvZ2dlcihwcmV2U3RhdGUsIG5ld1N0YXRlLCBsb2dnZXIsIGlzQ29sbGFwc2VkKSB7XG4gIHZhciBkaWZmID0gKDAsIF9kZWVwRGlmZjIuZGVmYXVsdCkocHJldlN0YXRlLCBuZXdTdGF0ZSk7XG5cbiAgdHJ5IHtcbiAgICBpZiAoaXNDb2xsYXBzZWQpIHtcbiAgICAgIGxvZ2dlci5ncm91cENvbGxhcHNlZCgnZGlmZicpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2dnZXIuZ3JvdXAoJ2RpZmYnKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBsb2dnZXIubG9nKCdkaWZmJyk7XG4gIH1cblxuICBpZiAoZGlmZikge1xuICAgIGRpZmYuZm9yRWFjaChmdW5jdGlvbiAoZWxlbSkge1xuICAgICAgdmFyIGtpbmQgPSBlbGVtLmtpbmQ7XG5cbiAgICAgIHZhciBvdXRwdXQgPSByZW5kZXIoZWxlbSk7XG5cbiAgICAgIGxvZ2dlci5sb2cuYXBwbHkobG9nZ2VyLCBbJyVjICcgKyBkaWN0aW9uYXJ5W2tpbmRdLnRleHQsIHN0eWxlKGtpbmQpXS5jb25jYXQoX3RvQ29uc3VtYWJsZUFycmF5KG91dHB1dCkpKTtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBsb2dnZXIubG9nKCdcXHUyMDE0XFx1MjAxNCBubyBkaWZmIFxcdTIwMTRcXHUyMDE0Jyk7XG4gIH1cblxuICB0cnkge1xuICAgIGxvZ2dlci5ncm91cEVuZCgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgbG9nZ2VyLmxvZygnXFx1MjAxNFxcdTIwMTQgZGlmZiBlbmQgXFx1MjAxNFxcdTIwMTQgJyk7XG4gIH1cbn1cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVkdXgtbG9nZ2VyL2xpYi9kaWZmLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NvcmUgPSByZXF1aXJlKCcuL2NvcmUnKTtcblxudmFyIF9oZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzJyk7XG5cbnZhciBfZGVmYXVsdHMgPSByZXF1aXJlKCcuL2RlZmF1bHRzJyk7XG5cbnZhciBfZGVmYXVsdHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZGVmYXVsdHMpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKipcbiAqIENyZWF0ZXMgbG9nZ2VyIHdpdGggZm9sbG93aW5nIG9wdGlvbnNcbiAqXG4gKiBAbmFtZXNwYWNlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9ucyAtIG9wdGlvbnMgZm9yIGxvZ2dlclxuICogQHBhcmFtIHtzdHJpbmcgfCBmdW5jdGlvbiB8IG9iamVjdH0gb3B0aW9ucy5sZXZlbCAtIGNvbnNvbGVbbGV2ZWxdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMuZHVyYXRpb24gLSBwcmludCBkdXJhdGlvbiBvZiBlYWNoIGFjdGlvbj9cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy50aW1lc3RhbXAgLSBwcmludCB0aW1lc3RhbXAgd2l0aCBlYWNoIGFjdGlvbj9cbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zLmNvbG9ycyAtIGN1c3RvbSBjb2xvcnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zLmxvZ2dlciAtIGltcGxlbWVudGF0aW9uIG9mIHRoZSBgY29uc29sZWAgQVBJXG4gKiBAcGFyYW0ge2Jvb2xlYW59IG9wdGlvbnMubG9nRXJyb3JzIC0gc2hvdWxkIGVycm9ycyBpbiBhY3Rpb24gZXhlY3V0aW9uIGJlIGNhdWdodCwgbG9nZ2VkLCBhbmQgcmUtdGhyb3duP1xuICogQHBhcmFtIHtib29sZWFufSBvcHRpb25zLmNvbGxhcHNlZCAtIGlzIGdyb3VwIGNvbGxhcHNlZD9cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5wcmVkaWNhdGUgLSBjb25kaXRpb24gd2hpY2ggcmVzb2x2ZXMgbG9nZ2VyIGJlaGF2aW9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLnN0YXRlVHJhbnNmb3JtZXIgLSB0cmFuc2Zvcm0gc3RhdGUgYmVmb3JlIHByaW50XG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBvcHRpb25zLmFjdGlvblRyYW5zZm9ybWVyIC0gdHJhbnNmb3JtIGFjdGlvbiBiZWZvcmUgcHJpbnRcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IG9wdGlvbnMuZXJyb3JUcmFuc2Zvcm1lciAtIHRyYW5zZm9ybSBlcnJvciBiZWZvcmUgcHJpbnRcbiAqXG4gKiBAcmV0dXJucyB7ZnVuY3Rpb259IGxvZ2dlciBtaWRkbGV3YXJlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUxvZ2dlcigpIHtcbiAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIHZhciBsb2dnZXJPcHRpb25zID0gX2V4dGVuZHMoe30sIF9kZWZhdWx0czIuZGVmYXVsdCwgb3B0aW9ucyk7XG5cbiAgdmFyIGxvZ2dlciA9IGxvZ2dlck9wdGlvbnMubG9nZ2VyLFxuICAgICAgdHJhbnNmb3JtZXIgPSBsb2dnZXJPcHRpb25zLnRyYW5zZm9ybWVyLFxuICAgICAgc3RhdGVUcmFuc2Zvcm1lciA9IGxvZ2dlck9wdGlvbnMuc3RhdGVUcmFuc2Zvcm1lcixcbiAgICAgIGVycm9yVHJhbnNmb3JtZXIgPSBsb2dnZXJPcHRpb25zLmVycm9yVHJhbnNmb3JtZXIsXG4gICAgICBwcmVkaWNhdGUgPSBsb2dnZXJPcHRpb25zLnByZWRpY2F0ZSxcbiAgICAgIGxvZ0Vycm9ycyA9IGxvZ2dlck9wdGlvbnMubG9nRXJyb3JzLFxuICAgICAgZGlmZlByZWRpY2F0ZSA9IGxvZ2dlck9wdGlvbnMuZGlmZlByZWRpY2F0ZTtcblxuICAvLyBSZXR1cm4gaWYgJ2NvbnNvbGUnIG9iamVjdCBpcyBub3QgZGVmaW5lZFxuXG4gIGlmICh0eXBlb2YgbG9nZ2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICByZXR1cm4gbmV4dChhY3Rpb24pO1xuICAgICAgICB9O1xuICAgICAgfTtcbiAgICB9O1xuICB9XG5cbiAgaWYgKHRyYW5zZm9ybWVyKSB7XG4gICAgY29uc29sZS5lcnJvcignT3B0aW9uIFxcJ3RyYW5zZm9ybWVyXFwnIGlzIGRlcHJlY2F0ZWQsIHVzZSBcXCdzdGF0ZVRyYW5zZm9ybWVyXFwnIGluc3RlYWQhJyk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tY29uc29sZVxuICB9XG5cbiAgLy8gRGV0ZWN0IGlmICdjcmVhdGVMb2dnZXInIHdhcyBwYXNzZWQgZGlyZWN0bHkgdG8gJ2FwcGx5TWlkZGxld2FyZScuXG4gIGlmIChvcHRpb25zLmdldFN0YXRlICYmIG9wdGlvbnMuZGlzcGF0Y2gpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgIGNvbnNvbGUuZXJyb3IoJ3JlZHV4LWxvZ2dlciBub3QgaW5zdGFsbGVkLiBNYWtlIHN1cmUgdG8gcGFzcyBsb2dnZXIgaW5zdGFuY2UgYXMgbWlkZGxld2FyZTpcXG5cXG5pbXBvcnQgY3JlYXRlTG9nZ2VyIGZyb20gXFwncmVkdXgtbG9nZ2VyXFwnO1xcblxcbmNvbnN0IGxvZ2dlciA9IGNyZWF0ZUxvZ2dlcigpO1xcbmNvbnN0IHN0b3JlID0gY3JlYXRlU3RvcmUoXFxuICByZWR1Y2VyLFxcbiAgYXBwbHlNaWRkbGV3YXJlKGxvZ2dlcilcXG4pOycpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAobmV4dCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICAgIHJldHVybiBuZXh0KGFjdGlvbik7XG4gICAgICAgIH07XG4gICAgICB9O1xuICAgIH07XG4gIH1cblxuICB2YXIgbG9nQnVmZmVyID0gW107XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIC8vIEV4aXQgZWFybHkgaWYgcHJlZGljYXRlIGZ1bmN0aW9uIHJldHVybnMgJ2ZhbHNlJ1xuICAgICAgICBpZiAodHlwZW9mIHByZWRpY2F0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiAhcHJlZGljYXRlKGdldFN0YXRlLCBhY3Rpb24pKSB7XG4gICAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2dFbnRyeSA9IHt9O1xuICAgICAgICBsb2dCdWZmZXIucHVzaChsb2dFbnRyeSk7XG5cbiAgICAgICAgbG9nRW50cnkuc3RhcnRlZCA9IF9oZWxwZXJzLnRpbWVyLm5vdygpO1xuICAgICAgICBsb2dFbnRyeS5zdGFydGVkVGltZSA9IG5ldyBEYXRlKCk7XG4gICAgICAgIGxvZ0VudHJ5LnByZXZTdGF0ZSA9IHN0YXRlVHJhbnNmb3JtZXIoZ2V0U3RhdGUoKSk7XG4gICAgICAgIGxvZ0VudHJ5LmFjdGlvbiA9IGFjdGlvbjtcblxuICAgICAgICB2YXIgcmV0dXJuZWRWYWx1ZSA9IHZvaWQgMDtcbiAgICAgICAgaWYgKGxvZ0Vycm9ycykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICByZXR1cm5lZFZhbHVlID0gbmV4dChhY3Rpb24pO1xuICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGxvZ0VudHJ5LmVycm9yID0gZXJyb3JUcmFuc2Zvcm1lcihlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuZWRWYWx1ZSA9IG5leHQoYWN0aW9uKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvZ0VudHJ5LnRvb2sgPSBfaGVscGVycy50aW1lci5ub3coKSAtIGxvZ0VudHJ5LnN0YXJ0ZWQ7XG4gICAgICAgIGxvZ0VudHJ5Lm5leHRTdGF0ZSA9IHN0YXRlVHJhbnNmb3JtZXIoZ2V0U3RhdGUoKSk7XG5cbiAgICAgICAgdmFyIGRpZmYgPSBsb2dnZXJPcHRpb25zLmRpZmYgJiYgdHlwZW9mIGRpZmZQcmVkaWNhdGUgPT09ICdmdW5jdGlvbicgPyBkaWZmUHJlZGljYXRlKGdldFN0YXRlLCBhY3Rpb24pIDogbG9nZ2VyT3B0aW9ucy5kaWZmO1xuXG4gICAgICAgICgwLCBfY29yZS5wcmludEJ1ZmZlcikobG9nQnVmZmVyLCBfZXh0ZW5kcyh7fSwgbG9nZ2VyT3B0aW9ucywgeyBkaWZmOiBkaWZmIH0pKTtcbiAgICAgICAgbG9nQnVmZmVyLmxlbmd0aCA9IDA7XG5cbiAgICAgICAgaWYgKGxvZ0VudHJ5LmVycm9yKSB0aHJvdyBsb2dFbnRyeS5lcnJvcjtcbiAgICAgICAgcmV0dXJuIHJldHVybmVkVmFsdWU7XG4gICAgICB9O1xuICAgIH07XG4gIH07XG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUxvZ2dlcjtcbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0c1snZGVmYXVsdCddO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVkdXgtbG9nZ2VyL2xpYi9pbmRleC5qcyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcbmZ1bmN0aW9uIGNyZWF0ZVRodW5rTWlkZGxld2FyZShleHRyYUFyZ3VtZW50KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoX3JlZikge1xuICAgIHZhciBkaXNwYXRjaCA9IF9yZWYuZGlzcGF0Y2gsXG4gICAgICAgIGdldFN0YXRlID0gX3JlZi5nZXRTdGF0ZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYWN0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgcmV0dXJuIGFjdGlvbihkaXNwYXRjaCwgZ2V0U3RhdGUsIGV4dHJhQXJndW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn1cblxudmFyIHRodW5rID0gY3JlYXRlVGh1bmtNaWRkbGV3YXJlKCk7XG50aHVuay53aXRoRXh0cmFBcmd1bWVudCA9IGNyZWF0ZVRodW5rTWlkZGxld2FyZTtcblxuZXhwb3J0c1snZGVmYXVsdCddID0gdGh1bms7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9yZWR1eC10aHVuay9saWIvaW5kZXguanMiXSwic291cmNlUm9vdCI6IiJ9