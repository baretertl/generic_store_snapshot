webpackJsonp([3],{

/***/ 118:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _warning = __webpack_require__(14);

var _warning2 = _interopRequireDefault(_warning);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var createTransitionManager = function createTransitionManager() {
  var prompt = null;

  var setPrompt = function setPrompt(nextPrompt) {
    (0, _warning2.default)(prompt == null, 'A history supports only one prompt at a time');

    prompt = nextPrompt;

    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  };

  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          (0, _warning2.default)(false, 'A history needs a getUserConfirmation function in order to use a prompt message');

          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  };

  var listeners = [];

  var appendListener = function appendListener(fn) {
    var isActive = true;

    var listener = function listener() {
      if (isActive) fn.apply(undefined, arguments);
    };

    listeners.push(listener);

    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  };

  var notifyListeners = function notifyListeners() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(undefined, args);
    });
  };

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
};

exports.default = createTransitionManager;

/***/ }),

/***/ 14:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = function warning() {};

if (process.env.NODE_ENV !== 'production') {
  warning = function warning(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }

    if (format.length < 10 || /^[s\W]*$/.test(format)) {
      throw new Error('The warning format should be able to uniquely identify this ' + 'warning. Please, use a more descriptive format than: ' + format);
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch (x) {}
    }
  };
}

module.exports = warning;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),

/***/ 15:
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2013-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function invariant(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(0)))

/***/ }),

/***/ 186:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var canUseDOM = exports.canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var addEventListener = exports.addEventListener = function addEventListener(node, event, listener) {
  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
};

var removeEventListener = exports.removeEventListener = function removeEventListener(node, event, listener) {
  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
};

var getConfirmation = exports.getConfirmation = function getConfirmation(message, callback) {
  return callback(window.confirm(message));
}; // eslint-disable-line no-alert

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */
var supportsHistory = exports.supportsHistory = function supportsHistory() {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

  return window.history && 'pushState' in window.history;
};

/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */
var supportsPopStateOnHashChange = exports.supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
};

/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */
var supportsGoWithoutReloadUsingHash = exports.supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
};

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */
var isExtraneousPopstateEvent = exports.isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
};

/***/ }),

/***/ 353:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _warning = __webpack_require__(14);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(15);

var _invariant2 = _interopRequireDefault(_invariant);

var _LocationUtils = __webpack_require__(76);

var _PathUtils = __webpack_require__(63);

var _createTransitionManager = __webpack_require__(118);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

var _DOMUtils = __webpack_require__(186);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

var getHistoryState = function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
};

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */
var createBrowserHistory = function createBrowserHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Browser history needs a DOM');

  var globalHistory = window.history;
  var canUseHistory = (0, _DOMUtils.supportsHistory)();
  var needsHashChangeListener = !(0, _DOMUtils.supportsPopStateOnHashChange)();

  var _props$forceRefresh = props.forceRefresh,
      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
      _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;

  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

  var getDOMLocation = function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;

    var path = pathname + search + hash;

    if (basename) path = (0, _PathUtils.stripPrefix)(path, basename);

    return _extends({}, (0, _PathUtils.parsePath)(path), {
      state: state,
      key: key
    });
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var handlePopState = function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if ((0, _DOMUtils.isExtraneousPopstateEvent)(event)) return;

    handlePop(getDOMLocation(event.state));
  };

  var handleHashChange = function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  };

  var forceNextPop = false;

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';

      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({ action: action, location: location });
        } else {
          revertPop(location);
        }
      });
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location;

    // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);

    if (toIndex === -1) toIndex = 0;

    var fromIndex = allKeys.indexOf(fromLocation.key);

    if (fromIndex === -1) fromIndex = 0;

    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key];

  // Public interface

  var createHref = function createHref(location) {
    return basename + (0, _PathUtils.createPath)(location);
  };

  var push = function push(path, state) {
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.pushState({ key: key, state: state }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

          nextKeys.push(location.key);
          allKeys = nextKeys;

          setState({ action: action, location: location });
        }
      } else {
        (0, _warning2.default)(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');

        window.location.href = href;
      }
    });
  };

  var replace = function replace(path, state) {
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var href = createHref(location);
      var key = location.key,
          state = location.state;

      if (canUseHistory) {
        globalHistory.replaceState({ key: key, state: state }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);

          if (prevIndex !== -1) allKeys[prevIndex] = location.key;

          setState({ action: action, location: location });
        }
      } else {
        (0, _warning2.default)(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');

        window.location.replace(href);
      }
    });
  };

  var go = function go(n) {
    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      (0, _DOMUtils.addEventListener)(window, PopStateEvent, handlePopState);

      if (needsHashChangeListener) (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      (0, _DOMUtils.removeEventListener)(window, PopStateEvent, handlePopState);

      if (needsHashChangeListener) (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);

    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createBrowserHistory;

/***/ }),

/***/ 354:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _warning = __webpack_require__(14);

var _warning2 = _interopRequireDefault(_warning);

var _invariant = __webpack_require__(15);

var _invariant2 = _interopRequireDefault(_invariant);

var _LocationUtils = __webpack_require__(76);

var _PathUtils = __webpack_require__(63);

var _createTransitionManager = __webpack_require__(118);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

var _DOMUtils = __webpack_require__(186);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var HashChangeEvent = 'hashchange';

var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + (0, _PathUtils.stripLeadingSlash)(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: _PathUtils.stripLeadingSlash,
    decodePath: _PathUtils.addLeadingSlash
  },
  slash: {
    encodePath: _PathUtils.addLeadingSlash,
    decodePath: _PathUtils.addLeadingSlash
  }
};

var getHashPath = function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
};

var pushHashPath = function pushHashPath(path) {
  return window.location.hash = path;
};

var replaceHashPath = function replaceHashPath(path) {
  var hashIndex = window.location.href.indexOf('#');

  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
};

var createHashHistory = function createHashHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  (0, _invariant2.default)(_DOMUtils.canUseDOM, 'Hash history needs a DOM');

  var globalHistory = window.history;
  var canGoWithoutReload = (0, _DOMUtils.supportsGoWithoutReloadUsingHash)();

  var _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? _DOMUtils.getConfirmation : _props$getUserConfirm,
      _props$hashType = props.hashType,
      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;

  var basename = props.basename ? (0, _PathUtils.stripTrailingSlash)((0, _PathUtils.addLeadingSlash)(props.basename)) : '';

  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;

  var getDOMLocation = function getDOMLocation() {
    var path = decodePath(getHashPath());

    if (basename) path = (0, _PathUtils.stripPrefix)(path, basename);

    return (0, _PathUtils.parsePath)(path);
  };

  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var forceNextPop = false;
  var ignorePath = null;

  var handleHashChange = function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;

      if (!forceNextPop && (0, _LocationUtils.locationsAreEqual)(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === (0, _PathUtils.createPath)(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;

      handlePop(location);
    }
  };

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';

      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({ action: action, location: location });
        } else {
          revertPop(location);
        }
      });
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location;

    // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(toLocation));

    if (toIndex === -1) toIndex = 0;

    var fromIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(fromLocation));

    if (fromIndex === -1) fromIndex = 0;

    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  // Ensure the hash is encoded properly before doing anything else.
  var path = getHashPath();
  var encodedPath = encodePath(path);

  if (path !== encodedPath) replaceHashPath(encodedPath);

  var initialLocation = getDOMLocation();
  var allPaths = [(0, _PathUtils.createPath)(initialLocation)];

  // Public interface

  var createHref = function createHref(location) {
    return '#' + encodePath(basename + (0, _PathUtils.createPath)(location));
  };

  var push = function push(path, state) {
    (0, _warning2.default)(state === undefined, 'Hash history cannot push state; it is ignored');

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var path = (0, _PathUtils.createPath)(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);

        var prevIndex = allPaths.lastIndexOf((0, _PathUtils.createPath)(history.location));
        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

        nextPaths.push(path);
        allPaths = nextPaths;

        setState({ action: action, location: location });
      } else {
        (0, _warning2.default)(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');

        setState();
      }
    });
  };

  var replace = function replace(path, state) {
    (0, _warning2.default)(state === undefined, 'Hash history cannot replace state; it is ignored');

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, undefined, undefined, history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var path = (0, _PathUtils.createPath)(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf((0, _PathUtils.createPath)(history.location));

      if (prevIndex !== -1) allPaths[prevIndex] = path;

      setState({ action: action, location: location });
    });
  };

  var go = function go(n) {
    (0, _warning2.default)(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');

    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      (0, _DOMUtils.addEventListener)(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      (0, _DOMUtils.removeEventListener)(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);

    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createHashHistory;

/***/ }),

/***/ 355:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _warning = __webpack_require__(14);

var _warning2 = _interopRequireDefault(_warning);

var _PathUtils = __webpack_require__(63);

var _LocationUtils = __webpack_require__(76);

var _createTransitionManager = __webpack_require__(118);

var _createTransitionManager2 = _interopRequireDefault(_createTransitionManager);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var clamp = function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
};

/**
 * Creates a history object that stores locations in memory.
 */
var createMemoryHistory = function createMemoryHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var getUserConfirmation = props.getUserConfirmation,
      _props$initialEntries = props.initialEntries,
      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
      _props$initialIndex = props.initialIndex,
      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;

  var transitionManager = (0, _createTransitionManager2.default)();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = history.entries.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry) {
    return typeof entry === 'string' ? (0, _LocationUtils.createLocation)(entry, undefined, createKey()) : (0, _LocationUtils.createLocation)(entry, undefined, entry.key || createKey());
  });

  // Public interface

  var createHref = _PathUtils.createPath;

  var push = function push(path, state) {
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'PUSH';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;

      var nextEntries = history.entries.slice(0);
      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  };

  var replace = function replace(path, state) {
    (0, _warning2.default)(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'REPLACE';
    var location = (0, _LocationUtils.createLocation)(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      history.entries[history.index] = location;

      setState({ action: action, location: location });
    });
  };

  var go = function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);

    var action = 'POP';
    var location = history.entries[nextIndex];

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var canGo = function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  };

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return transitionManager.setPrompt(prompt);
  };

  var listen = function listen(listener) {
    return transitionManager.appendListener(listener);
  };

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };

  return history;
};

exports.default = createMemoryHistory;

/***/ }),

/***/ 555:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var isAbsolute = function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
};

// About 1.5x faster than the two-arg version of Array#splice()
var spliceOne = function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }list.pop();
};

// This implementation is based heavily on node's url.parse
var resolvePathname = function resolvePathname(to) {
  var from = arguments.length <= 1 || arguments[1] === undefined ? '' : arguments[1];

  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash = void 0;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
};

module.exports = resolvePathname;

/***/ }),

/***/ 562:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

exports.__esModule = true;

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var valueEqual = function valueEqual(a, b) {
  if (a === b) return true;

  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    if (!Array.isArray(b) || a.length !== b.length) return false;

    return a.every(function (item, index) {
      return valueEqual(item, b[index]);
    });
  }

  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

  if (aType !== bType) return false;

  if (aType === 'object') {
    var aValue = a.valueOf();
    var bValue = b.valueOf();

    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);

    if (aKeys.length !== bKeys.length) return false;

    return aKeys.every(function (key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
};

exports.default = valueEqual;

/***/ }),

/***/ 566:
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(93);


/***/ }),

/***/ 63:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
var addLeadingSlash = exports.addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
};

var stripLeadingSlash = exports.stripLeadingSlash = function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
};

var stripPrefix = exports.stripPrefix = function stripPrefix(path, prefix) {
  return path.indexOf(prefix) === 0 ? path.substr(prefix.length) : path;
};

var stripTrailingSlash = exports.stripTrailingSlash = function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
};

var parsePath = exports.parsePath = function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';

  pathname = decodeURI(pathname);
  var hashIndex = pathname.indexOf('#');
  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');
  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
};

var createPath = exports.createPath = function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;

  var path = pathname || '/';

  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;

  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;

  return encodeURI(path);
};

/***/ }),

/***/ 76:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.locationsAreEqual = exports.createLocation = undefined;

var _extends = Object.assign || function (target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i];for (var key in source) {
      if (Object.prototype.hasOwnProperty.call(source, key)) {
        target[key] = source[key];
      }
    }
  }return target;
};

var _resolvePathname = __webpack_require__(555);

var _resolvePathname2 = _interopRequireDefault(_resolvePathname);

var _valueEqual = __webpack_require__(562);

var _valueEqual2 = _interopRequireDefault(_valueEqual);

var _PathUtils = __webpack_require__(63);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var createLocation = exports.createLocation = function createLocation(path, state, key, currentLocation) {
  var location = void 0;
  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = (0, _PathUtils.parsePath)(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = _extends({}, path);

    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = (0, _resolvePathname2.default)(location.pathname, currentLocation.pathname);
    }
  }

  return location;
};

var locationsAreEqual = exports.locationsAreEqual = function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && (0, _valueEqual2.default)(a.state, b.state);
};

/***/ }),

/***/ 93:
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;
exports.createPath = exports.parsePath = exports.locationsAreEqual = exports.createLocation = exports.createMemoryHistory = exports.createHashHistory = exports.createBrowserHistory = undefined;

var _LocationUtils = __webpack_require__(76);

Object.defineProperty(exports, 'createLocation', {
  enumerable: true,
  get: function get() {
    return _LocationUtils.createLocation;
  }
});
Object.defineProperty(exports, 'locationsAreEqual', {
  enumerable: true,
  get: function get() {
    return _LocationUtils.locationsAreEqual;
  }
});

var _PathUtils = __webpack_require__(63);

Object.defineProperty(exports, 'parsePath', {
  enumerable: true,
  get: function get() {
    return _PathUtils.parsePath;
  }
});
Object.defineProperty(exports, 'createPath', {
  enumerable: true,
  get: function get() {
    return _PathUtils.createPath;
  }
});

var _createBrowserHistory2 = __webpack_require__(353);

var _createBrowserHistory3 = _interopRequireDefault(_createBrowserHistory2);

var _createHashHistory2 = __webpack_require__(354);

var _createHashHistory3 = _interopRequireDefault(_createHashHistory2);

var _createMemoryHistory2 = __webpack_require__(355);

var _createMemoryHistory3 = _interopRequireDefault(_createMemoryHistory2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.createBrowserHistory = _createBrowserHistory3.default;
exports.createHashHistory = _createHashHistory3.default;
exports.createMemoryHistory = _createMemoryHistory3.default;

/***/ })

},[566]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9+L2hpc3RvcnkvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vfi9pbnZhcmlhbnQvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9+L2hpc3RvcnkvRE9NVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vfi9oaXN0b3J5L2NyZWF0ZUJyb3dzZXJIaXN0b3J5LmpzIiwid2VicGFjazovLy8uL34vaGlzdG9yeS9jcmVhdGVIYXNoSGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9+L2hpc3RvcnkvY3JlYXRlTWVtb3J5SGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9+L3Jlc29sdmUtcGF0aG5hbWUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vfi92YWx1ZS1lcXVhbC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9+L2hpc3RvcnkvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL34vaGlzdG9yeS9Mb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uL34vaGlzdG9yeS9pbmRleC5qcyJdLCJuYW1lcyI6WyJleHBvcnRzIiwiX19lc01vZHVsZSIsIl93YXJuaW5nIiwicmVxdWlyZSIsIl93YXJuaW5nMiIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJkZWZhdWx0IiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImxvY2F0aW9uIiwiYWN0aW9uIiwiZ2V0VXNlckNvbmZpcm1hdGlvbiIsImNhbGxiYWNrIiwicmVzdWx0IiwibGlzdGVuZXJzIiwiYXBwZW5kTGlzdGVuZXIiLCJmbiIsImlzQWN0aXZlIiwibGlzdGVuZXIiLCJhcHBseSIsInVuZGVmaW5lZCIsImFyZ3VtZW50cyIsInB1c2giLCJmaWx0ZXIiLCJpdGVtIiwibm90aWZ5TGlzdGVuZXJzIiwiX2xlbiIsImxlbmd0aCIsImFyZ3MiLCJBcnJheSIsIl9rZXkiLCJmb3JFYWNoIiwid2FybmluZyIsInByb2Nlc3MiLCJlbnYiLCJOT0RFX0VOViIsImNvbmRpdGlvbiIsImZvcm1hdCIsImxlbiIsImtleSIsIkVycm9yIiwidGVzdCIsImFyZ0luZGV4IiwibWVzc2FnZSIsInJlcGxhY2UiLCJjb25zb2xlIiwiZXJyb3IiLCJ4IiwibW9kdWxlIiwiaW52YXJpYW50IiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwibmFtZSIsImZyYW1lc1RvUG9wIiwiY2FuVXNlRE9NIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm5vZGUiLCJldmVudCIsImF0dGFjaEV2ZW50IiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRldGFjaEV2ZW50IiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsInN1cHBvcnRzSGlzdG9yeSIsInVhIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwiaW5kZXhPZiIsImhpc3RvcnkiLCJzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlIiwic3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2giLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50Iiwic3RhdGUiLCJfdHlwZW9mIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJjb25zdHJ1Y3RvciIsInByb3RvdHlwZSIsIl9leHRlbmRzIiwiT2JqZWN0IiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsInNvdXJjZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIl9pbnZhcmlhbnQiLCJfaW52YXJpYW50MiIsIl9Mb2NhdGlvblV0aWxzIiwiX1BhdGhVdGlscyIsIl9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsIl9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjIiLCJfRE9NVXRpbHMiLCJQb3BTdGF0ZUV2ZW50IiwiSGFzaENoYW5nZUV2ZW50IiwiZ2V0SGlzdG9yeVN0YXRlIiwiY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJwcm9wcyIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiYWRkTGVhZGluZ1NsYXNoIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfcmVmIiwiX3dpbmRvdyRsb2NhdGlvbiIsInBhdGhuYW1lIiwic2VhcmNoIiwiaGFzaCIsInBhdGgiLCJzdHJpcFByZWZpeCIsInBhcnNlUGF0aCIsImNyZWF0ZUtleSIsIk1hdGgiLCJyYW5kb20iLCJ0b1N0cmluZyIsInN1YnN0ciIsInRyYW5zaXRpb25NYW5hZ2VyIiwic2V0U3RhdGUiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsInJldmVydFBvcCIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImZyb21JbmRleCIsImRlbHRhIiwiZ28iLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwiY3JlYXRlUGF0aCIsImNyZWF0ZUxvY2F0aW9uIiwiaHJlZiIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwic2xpY2UiLCJyZXBsYWNlU3RhdGUiLCJuIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwiaXNCbG9ja2VkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImNoYXJBdCIsInN0cmlwTGVhZGluZ1NsYXNoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsImdldEhhc2hQYXRoIiwiaGFzaEluZGV4Iiwic3Vic3RyaW5nIiwicHVzaEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJjYW5Hb1dpdGhvdXRSZWxvYWQiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImxvY2F0aW9uc0FyZUVxdWFsIiwiYWxsUGF0aHMiLCJsYXN0SW5kZXhPZiIsImhhc2hDaGFuZ2VkIiwibmV4dFBhdGhzIiwiY2xhbXAiLCJsb3dlckJvdW5kIiwidXBwZXJCb3VuZCIsIm1pbiIsIm1heCIsImNyZWF0ZU1lbW9yeUhpc3RvcnkiLCJfcHJvcHMkaW5pdGlhbEVudHJpZXMiLCJpbml0aWFsRW50cmllcyIsIl9wcm9wcyRpbml0aWFsSW5kZXgiLCJpbml0aWFsSW5kZXgiLCJlbnRyaWVzIiwiaW5kZXgiLCJtYXAiLCJlbnRyeSIsIm5leHRJbmRleCIsIm5leHRFbnRyaWVzIiwic3BsaWNlIiwiY2FuR28iLCJpc0Fic29sdXRlIiwic3BsaWNlT25lIiwibGlzdCIsImsiLCJwb3AiLCJyZXNvbHZlUGF0aG5hbWUiLCJ0byIsImZyb20iLCJ0b1BhcnRzIiwic3BsaXQiLCJmcm9tUGFydHMiLCJpc1RvQWJzIiwiaXNGcm9tQWJzIiwibXVzdEVuZEFicyIsImNvbmNhdCIsImhhc1RyYWlsaW5nU2xhc2giLCJsYXN0IiwidXAiLCJwYXJ0IiwidW5zaGlmdCIsImpvaW4iLCJ2YWx1ZUVxdWFsIiwiaXNBcnJheSIsImV2ZXJ5IiwiYVR5cGUiLCJiVHlwZSIsImFWYWx1ZSIsInZhbHVlT2YiLCJiVmFsdWUiLCJhS2V5cyIsImtleXMiLCJiS2V5cyIsInByZWZpeCIsImRlY29kZVVSSSIsInNlYXJjaEluZGV4IiwiZW5jb2RlVVJJIiwiX3Jlc29sdmVQYXRobmFtZSIsIl9yZXNvbHZlUGF0aG5hbWUyIiwiX3ZhbHVlRXF1YWwiLCJfdmFsdWVFcXVhbDIiLCJjdXJyZW50TG9jYXRpb24iLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJfY3JlYXRlQnJvd3Nlckhpc3RvcnkyIiwiX2NyZWF0ZUJyb3dzZXJIaXN0b3J5MyIsIl9jcmVhdGVIYXNoSGlzdG9yeTIiLCJfY3JlYXRlSGFzaEhpc3RvcnkzIiwiX2NyZWF0ZU1lbW9yeUhpc3RvcnkyIiwiX2NyZWF0ZU1lbW9yeUhpc3RvcnkzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFFQUEsUUFBUUMsVUFBUixHQUFxQixJQUFyQjs7QUFFQSxJQUFJQyxXQUFXLG1CQUFBQyxDQUFRLEVBQVIsQ0FBZjs7QUFFQSxJQUFJQyxZQUFZQyx1QkFBdUJILFFBQXZCLENBQWhCOztBQUVBLFNBQVNHLHNCQUFULENBQWdDQyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLE9BQU9BLElBQUlMLFVBQVgsR0FBd0JLLEdBQXhCLEdBQThCLEVBQUVDLFNBQVNELEdBQVgsRUFBckM7QUFBd0Q7O0FBRS9GLElBQUlFLDBCQUEwQixTQUFTQSx1QkFBVCxHQUFtQztBQUMvRCxNQUFJQyxTQUFTLElBQWI7O0FBRUEsTUFBSUMsWUFBWSxTQUFTQSxTQUFULENBQW1CQyxVQUFuQixFQUErQjtBQUM3QyxLQUFDLEdBQUdQLFVBQVVHLE9BQWQsRUFBdUJFLFVBQVUsSUFBakMsRUFBdUMsOENBQXZDOztBQUVBQSxhQUFTRSxVQUFUOztBQUVBLFdBQU8sWUFBWTtBQUNqQixVQUFJRixXQUFXRSxVQUFmLEVBQTJCRixTQUFTLElBQVQ7QUFDNUIsS0FGRDtBQUdELEdBUkQ7O0FBVUEsTUFBSUcsc0JBQXNCLFNBQVNBLG1CQUFULENBQTZCQyxRQUE3QixFQUF1Q0MsTUFBdkMsRUFBK0NDLG1CQUEvQyxFQUFvRUMsUUFBcEUsRUFBOEU7QUFDdEc7QUFDQTtBQUNBO0FBQ0EsUUFBSVAsVUFBVSxJQUFkLEVBQW9CO0FBQ2xCLFVBQUlRLFNBQVMsT0FBT1IsTUFBUCxL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Q0FBNUI7O0FBRUEsU0FBU2xRLHNCQUFULENBQWdDQyxHQUFoQyxFQUFxQztBQUFFLFNBQU9BLE9BQU9BLElBQUlMLFVBQVgsR0FBd0JLLEdBQXhCLEdBQThCLEVBQUVDLFNBQVNELEdBQVgsRUFBckM7QUFBd0Q7O0FBRS9GTixRQUFRMkcsb0JBQVIsR0FBK0J5Six1QkFBdUI3UCxPQUF0RDtBQUNBUCxRQUFRd0wsaUJBQVIsR0FBNEI4RSxvQkFBb0IvUCxPQUFoRDtBQUNBUCxRQUFRME0sbUJBQVIsR0FBOEI4RCxzQkFBc0JqUSxPQUFwRCxDIiwiZmlsZSI6Ii4vanMvdmVuZG9yX2hpc3RvcnlfY29yZS5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSBmdW5jdGlvbiBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcigpIHtcbiAgdmFyIHByb21wdCA9IG51bGw7XG5cbiAgdmFyIHNldFByb21wdCA9IGZ1bmN0aW9uIHNldFByb21wdChuZXh0UHJvbXB0KSB7XG4gICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShwcm9tcHQgPT0gbnVsbCwgJ0EgaGlzdG9yeSBzdXBwb3J0cyBvbmx5IG9uZSBwcm9tcHQgYXQgYSB0aW1lJyk7XG5cbiAgICBwcm9tcHQgPSBuZXh0UHJvbXB0O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgY29uZmlybVRyYW5zaXRpb25UbyA9IGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKTtcblxuICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBSZXR1cm4gZmFsc2UgZnJvbSBhIHRyYW5zaXRpb24gaG9vayB0byBjYW5jZWwgdGhlIHRyYW5zaXRpb24uXG4gICAgICAgIGNhbGxiYWNrKHJlc3VsdCAhPT0gZmFsc2UpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIHZhciBhcHBlbmRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh1bmRlZmluZWQsIGFyZ3VtZW50cyk7XG4gICAgfTtcblxuICAgIGxpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBub3RpZnlMaXN0ZW5lcnMgPSBmdW5jdGlvbiBub3RpZnlMaXN0ZW5lcnMoKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLmZvckVhY2goZnVuY3Rpb24gKGxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gbGlzdGVuZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4ge1xuICAgIHNldFByb21wdDogc2V0UHJvbXB0LFxuICAgIGNvbmZpcm1UcmFuc2l0aW9uVG86IGNvbmZpcm1UcmFuc2l0aW9uVG8sXG4gICAgYXBwZW5kTGlzdGVuZXI6IGFwcGVuZExpc3RlbmVyLFxuICAgIG5vdGlmeUxpc3RlbmVyczogbm90aWZ5TGlzdGVuZXJzXG4gIH07XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlcjtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2hpc3RvcnkvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vd2FybmluZy9icm93c2VyLmpzIiwiLyoqXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE1LCBGYWNlYm9vaywgSW5jLlxuICogQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBCU0Qtc3R5bGUgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS4gQW4gYWRkaXRpb25hbCBncmFudFxuICogb2YgcGF0ZW50IHJpZ2h0cyBjYW4gYmUgZm91bmQgaW4gdGhlIFBBVEVOVFMgZmlsZSBpbiB0aGUgc2FtZSBkaXJlY3RvcnkuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFVzZSBpbnZhcmlhbnQoKSB0byBhc3NlcnQgc3RhdGUgd2hpY2ggeW91ciBwcm9ncmFtIGFzc3VtZXMgdG8gYmUgdHJ1ZS5cbiAqXG4gKiBQcm92aWRlIHNwcmludGYtc3R5bGUgZm9ybWF0IChvbmx5ICVzIGlzIHN1cHBvcnRlZCkgYW5kIGFyZ3VtZW50c1xuICogdG8gcHJvdmlkZSBpbmZvcm1hdGlvbiBhYm91dCB3aGF0IGJyb2tlIGFuZCB3aGF0IHlvdSB3ZXJlXG4gKiBleHBlY3RpbmcuXG4gKlxuICogVGhlIGludmFyaWFudCBtZXNzYWdlIHdpbGwgYmUgc3RyaXBwZWQgaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBpbnZhcmlhbnRcbiAqIHdpbGwgcmVtYWluIHRvIGVuc3VyZSBsb2dpYyBkb2VzIG5vdCBkaWZmZXIgaW4gcHJvZHVjdGlvbi5cbiAqL1xuXG52YXIgaW52YXJpYW50ID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGEsIGIsIGMsIGQsIGUsIGYpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignaW52YXJpYW50IHJlcXVpcmVzIGFuIGVycm9yIG1lc3NhZ2UgYXJndW1lbnQnKTtcbiAgICB9XG4gIH1cblxuICBpZiAoIWNvbmRpdGlvbikge1xuICAgIHZhciBlcnJvcjtcbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICAnTWluaWZpZWQgZXhjZXB0aW9uIG9jY3VycmVkOyB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgJyArXG4gICAgICAgICdmb3IgdGhlIGZ1bGwgZXJyb3IgbWVzc2FnZSBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLidcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhcmdzID0gW2EsIGIsIGMsIGQsIGUsIGZdO1xuICAgICAgdmFyIGFyZ0luZGV4ID0gMDtcbiAgICAgIGVycm9yID0gbmV3IEVycm9yKFxuICAgICAgICBmb3JtYXQucmVwbGFjZSgvJXMvZywgZnVuY3Rpb24oKSB7IHJldHVybiBhcmdzW2FyZ0luZGV4KytdOyB9KVxuICAgICAgKTtcbiAgICAgIGVycm9yLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgfVxuXG4gICAgZXJyb3IuZnJhbWVzVG9Qb3AgPSAxOyAvLyB3ZSBkb24ndCBjYXJlIGFib3V0IGludmFyaWFudCdzIG93biBmcmFtZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludmFyaWFudDtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaW52YXJpYW50L2Jyb3dzZXIuanMiLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWU7XG52YXIgY2FuVXNlRE9NID0gZXhwb3J0cy5jYW5Vc2VET00gPSAhISh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZG9jdW1lbnQgJiYgd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG52YXIgYWRkRXZlbnRMaXN0ZW5lciA9IGV4cG9ydHMuYWRkRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uIGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgZXZlbnQsIGxpc3RlbmVyKSB7XG4gIHJldHVybiBub2RlLmFkZEV2ZW50TGlzdGVuZXIgPyBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIGxpc3RlbmVyLCBmYWxzZSkgOiBub2RlLmF0dGFjaEV2ZW50KCdvbicgKyBldmVudCwgbGlzdGVuZXIpO1xufTtcblxudmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBleHBvcnRzLnJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbnZhciBnZXRDb25maXJtYXRpb24gPSBleHBvcnRzLmdldENvbmZpcm1hdGlvbiA9IGZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sod2luZG93LmNvbmZpcm0obWVzc2FnZSkpO1xufTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1hbGVydFxuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaXMgc3VwcG9ydGVkLiBUYWtlbiBmcm9tIE1vZGVybml6ci5cbiAqXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9MSUNFTlNFXG4gKiBodHRwczovL2dpdGh1Yi5jb20vTW9kZXJuaXpyL01vZGVybml6ci9ibG9iL21hc3Rlci9mZWF0dXJlLWRldGVjdHMvaGlzdG9yeS5qc1xuICogY2hhbmdlZCB0byBhdm9pZCBmYWxzZSBuZWdhdGl2ZXMgZm9yIFdpbmRvd3MgUGhvbmVzOiBodHRwczovL2dpdGh1Yi5jb20vcmVhY3Rqcy9yZWFjdC1yb3V0ZXIvaXNzdWVzLzU4NlxuICovXG52YXIgc3VwcG9ydHNIaXN0b3J5ID0gZXhwb3J0cy5zdXBwb3J0c0hpc3RvcnkgPSBmdW5jdGlvbiBzdXBwb3J0c0hpc3RvcnkoKSB7XG4gIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xuXG4gIGlmICgodWEuaW5kZXhPZignQW5kcm9pZCAyLicpICE9PSAtMSB8fCB1YS5pbmRleE9mKCdBbmRyb2lkIDQuMCcpICE9PSAtMSkgJiYgdWEuaW5kZXhPZignTW9iaWxlIFNhZmFyaScpICE9PSAtMSAmJiB1YS5pbmRleE9mKCdDaHJvbWUnKSA9PT0gLTEgJiYgdWEuaW5kZXhPZignV2luZG93cyBQaG9uZScpID09PSAtMSkgcmV0dXJuIGZhbHNlO1xuXG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn07XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xudmFyIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBleHBvcnRzLnN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn07XG5cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG52YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBleHBvcnRzLnN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoID0gZnVuY3Rpb24gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdGaXJlZm94JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIHRydWUgaWYgYSBnaXZlbiBwb3BzdGF0ZSBldmVudCBpcyBhbiBleHRyYW5lb3VzIFdlYktpdCBldmVudC5cbiAqIEFjY291bnRzIGZvciB0aGUgZmFjdCB0aGF0IENocm9tZSBvbiBpT1MgZmlyZXMgcmVhbCBwb3BzdGF0ZSBldmVudHNcbiAqIGNvbnRhaW5pbmcgdW5kZWZpbmVkIHN0YXRlIHdoZW4gcHJlc3NpbmcgdGhlIGJhY2sgYnV0dG9uLlxuICovXG52YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGV4cG9ydHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9oaXN0b3J5L0RPTVV0aWxzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX2ludmFyaWFudCA9IHJlcXVpcmUoJ2ludmFyaWFudCcpO1xuXG52YXIgX2ludmFyaWFudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnZhcmlhbnQpO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxudmFyIF9QYXRoVXRpbHMgPSByZXF1aXJlKCcuL1BhdGhVdGlscycpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxudmFyIF9ET01VdGlscyA9IHJlcXVpcmUoJy4vRE9NVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgKDAsIF9pbnZhcmlhbnQyLmRlZmF1bHQpKF9ET01VdGlscy5jYW5Vc2VET00sICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuVXNlSGlzdG9yeSA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNIaXN0b3J5KSgpO1xuICB2YXIgbmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIgPSAhKDAsIF9ET01VdGlscy5zdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKSgpO1xuXG4gIHZhciBfcHJvcHMkZm9yY2VSZWZyZXNoID0gcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IF9ET01VdGlscy5nZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gcHJvcHMua2V5TGVuZ3RoLFxuICAgICAga2V5TGVuZ3RoID0gX3Byb3BzJGtleUxlbmd0aCA9PT0gdW5kZWZpbmVkID8gNiA6IF9wcm9wcyRrZXlMZW5ndGg7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyAoMCwgX1BhdGhVdGlscy5zdHJpcFRyYWlsaW5nU2xhc2gpKCgwLCBfUGF0aFV0aWxzLmFkZExlYWRpbmdTbGFzaCkocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG5cblxuICAgIHZhciBwYXRoID0gcGF0aG5hbWUgKyBzZWFyY2ggKyBoYXNoO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gKDAsIF9QYXRoVXRpbHMuc3RyaXBQcmVmaXgpKHBhdGgsIGJhc2VuYW1lKTtcblxuICAgIHJldHVybiBfZXh0ZW5kcyh7fSwgKDAsIF9QYXRoVXRpbHMucGFyc2VQYXRoKShwYXRoKSwge1xuICAgICAgc3RhdGU6IHN0YXRlLFxuICAgICAga2V5OiBrZXlcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgY3JlYXRlS2V5ID0gZnVuY3Rpb24gY3JlYXRlS2V5KCkge1xuICAgIHJldHVybiBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwga2V5TGVuZ3RoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wU3RhdGUgPSBmdW5jdGlvbiBoYW5kbGVQb3BTdGF0ZShldmVudCkge1xuICAgIC8vIElnbm9yZSBleHRyYW5lb3VzIHBvcHN0YXRlIGV2ZW50cyBpbiBXZWJLaXQuXG4gICAgaWYgKCgwLCBfRE9NVXRpbHMuaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCkoZXZlbnQpKSByZXR1cm47XG5cbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZXZlbnQuc3RhdGUpKTtcbiAgfTtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKSk7XG4gIH07XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2Yga2V5cyB3ZSd2ZSBzZWVuIGluIHNlc3Npb25TdG9yYWdlLlxuICAgIC8vIEluc3RlYWQsIHdlIGp1c3QgZGVmYXVsdCB0byAwIGZvciBrZXlzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbEtleXMuaW5kZXhPZih0b0xvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbEtleXMuaW5kZXhPZihmcm9tTG9jYXRpb24ua2V5KTtcblxuICAgIGlmIChmcm9tSW5kZXggPT09IC0xKSBmcm9tSW5kZXggPSAwO1xuXG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGluaXRpYWxMb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKGdldEhpc3RvcnlTdGF0ZSgpKTtcbiAgdmFyIGFsbEtleXMgPSBbaW5pdGlhbExvY2F0aW9uLmtleV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiBiYXNlbmFtZSArICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5wdXNoU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgICAgbmV4dEtleXMucHVzaChsb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGFsbEtleXMgPSBuZXh0S2V5cztcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgKDAsIF93YXJuaW5nMi5kZWZhdWx0KShzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gaHJlZjtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cblxuICAgICAgaWYgKGNhblVzZUhpc3RvcnkpIHtcbiAgICAgICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyBrZXk6IGtleSwgc3RhdGU6IHN0YXRlIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsS2V5cy5pbmRleE9mKGhpc3RvcnkubG9jYXRpb24ua2V5KTtcblxuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpICgwLCBfRE9NVXRpbHMuYWRkRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgKDAsIF9ET01VdGlscy5yZW1vdmVFdmVudExpc3RlbmVyKSh3aW5kb3csIFBvcFN0YXRlRXZlbnQsIGhhbmRsZVBvcFN0YXRlKTtcblxuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSAoMCwgX0RPTVV0aWxzLnJlbW92ZUV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBsaXN0ZW4gPSBmdW5jdGlvbiBsaXN0ZW4obGlzdGVuZXIpIHtcbiAgICB2YXIgdW5saXN0ZW4gPSB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZ2xvYmFsSGlzdG9yeS5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogaW5pdGlhbExvY2F0aW9uLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZUJyb3dzZXJIaXN0b3J5O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaGlzdG9yeS9jcmVhdGVCcm93c2VySGlzdG9yeS5qcyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxudmFyIF93YXJuaW5nID0gcmVxdWlyZSgnd2FybmluZycpO1xuXG52YXIgX3dhcm5pbmcyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfd2FybmluZyk7XG5cbnZhciBfaW52YXJpYW50ID0gcmVxdWlyZSgnaW52YXJpYW50Jyk7XG5cbnZhciBfaW52YXJpYW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2ludmFyaWFudCk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIgPSByZXF1aXJlKCcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJyk7XG5cbnZhciBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIpO1xuXG52YXIgX0RPTVV0aWxzID0gcmVxdWlyZSgnLi9ET01VdGlscycpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgKDAsIF9QYXRoVXRpbHMuc3RyaXBMZWFkaW5nU2xhc2gpKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBfUGF0aFV0aWxzLnN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoXG4gIH0sXG4gIHNsYXNoOiB7XG4gICAgZW5jb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogX1BhdGhVdGlscy5hZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gICgwLCBfaW52YXJpYW50Mi5kZWZhdWx0KShfRE9NVXRpbHMuY2FuVXNlRE9NLCAnSGFzaCBoaXN0b3J5IG5lZWRzIGEgRE9NJyk7XG5cbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9ICgwLCBfRE9NVXRpbHMuc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2gpKCk7XG5cbiAgdmFyIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB1bmRlZmluZWQgPyBfRE9NVXRpbHMuZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gcHJvcHMuaGFzaFR5cGUsXG4gICAgICBoYXNoVHlwZSA9IF9wcm9wcyRoYXNoVHlwZSA9PT0gdW5kZWZpbmVkID8gJ3NsYXNoJyA6IF9wcm9wcyRoYXNoVHlwZTtcblxuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/ICgwLCBfUGF0aFV0aWxzLnN0cmlwVHJhaWxpbmdTbGFzaCkoKDAsIF9QYXRoVXRpbHMuYWRkTGVhZGluZ1NsYXNoKShwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIF9IYXNoUGF0aENvZGVycyRoYXNoVCA9IEhhc2hQYXRoQ29kZXJzW2hhc2hUeXBlXSxcbiAgICAgIGVuY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZW5jb2RlUGF0aCxcbiAgICAgIGRlY29kZVBhdGggPSBfSGFzaFBhdGhDb2RlcnMkaGFzaFQuZGVjb2RlUGF0aDtcblxuXG4gIHZhciBnZXRET01Mb2NhdGlvbiA9IGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKCkge1xuICAgIHZhciBwYXRoID0gZGVjb2RlUGF0aChnZXRIYXNoUGF0aCgpKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLnN0cmlwUHJlZml4KShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gKDAsIF9QYXRoVXRpbHMucGFyc2VQYXRoKShwYXRoKTtcbiAgfTtcblxuICB2YXIgdHJhbnNpdGlvbk1hbmFnZXIgPSAoMCwgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMi5kZWZhdWx0KSgpO1xuXG4gIHZhciBzZXRTdGF0ZSA9IGZ1bmN0aW9uIHNldFN0YXRlKG5leHRTdGF0ZSkge1xuICAgIF9leHRlbmRzKGhpc3RvcnksIG5leHRTdGF0ZSk7XG5cbiAgICBoaXN0b3J5Lmxlbmd0aCA9IGdsb2JhbEhpc3RvcnkubGVuZ3RoO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIubm90aWZ5TGlzdGVuZXJzKGhpc3RvcnkubG9jYXRpb24sIGhpc3RvcnkuYWN0aW9uKTtcbiAgfTtcblxuICB2YXIgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gIHZhciBpZ25vcmVQYXRoID0gbnVsbDtcblxuICB2YXIgaGFuZGxlSGFzaENoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgICAgaWYgKCFmb3JjZU5leHRQb3AgJiYgKDAsIF9Mb2NhdGlvblV0aWxzLmxvY2F0aW9uc0FyZUVxdWFsKShwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pKSByZXR1cm47IC8vIElnbm9yZSB0aGlzIGNoYW5nZTsgd2UgYWxyZWFkeSBzZXRTdGF0ZSBpbiBwdXNoL3JlcGxhY2UuXG5cbiAgICAgIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gICAgICBoYW5kbGVQb3AobG9jYXRpb24pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIHBhdGhzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIHBhdGhzIHdlIGRvbid0IGtub3cuXG5cbiAgICB2YXIgdG9JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKCgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKHRvTG9jYXRpb24pKTtcblxuICAgIGlmICh0b0luZGV4ID09PSAtMSkgdG9JbmRleCA9IDA7XG5cbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkoaW5pdGlhbExvY2F0aW9uKV07XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gZnVuY3Rpb24gY3JlYXRlSHJlZihsb2NhdGlvbikge1xuICAgIHJldHVybiAnIycgKyBlbmNvZGVQYXRoKGJhc2VuYW1lICsgKDAsIF9QYXRoVXRpbHMuY3JlYXRlUGF0aCkobG9jYXRpb24pKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5sYXN0SW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgcGF0aCA9ICgwLCBfUGF0aFV0aWxzLmNyZWF0ZVBhdGgpKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZigoMCwgX1BhdGhVdGlscy5jcmVhdGVQYXRoKShoaXN0b3J5LmxvY2F0aW9uKSk7XG5cbiAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxQYXRoc1twcmV2SW5kZXhdID0gcGF0aDtcblxuICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpO1xuXG4gICAgZ2xvYmFsSGlzdG9yeS5nbyhuKTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIHZhciBjaGVja0RPTUxpc3RlbmVycyA9IGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxKSB7XG4gICAgICAoMCwgX0RPTVV0aWxzLmFkZEV2ZW50TGlzdGVuZXIpKHdpbmRvdywgSGFzaENoYW5nZUV2ZW50LCBoYW5kbGVIYXNoQ2hhbmdlKTtcbiAgICB9IGVsc2UgaWYgKGxpc3RlbmVyQ291bnQgPT09IDApIHtcbiAgICAgICgwLCBfRE9NVXRpbHMucmVtb3ZlRXZlbnRMaXN0ZW5lcikod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlSGFzaEhpc3Rvcnk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9oaXN0b3J5L2NyZWF0ZUhhc2hIaXN0b3J5LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfd2FybmluZyA9IHJlcXVpcmUoJ3dhcm5pbmcnKTtcblxudmFyIF93YXJuaW5nMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dhcm5pbmcpO1xuXG52YXIgX1BhdGhVdGlscyA9IHJlcXVpcmUoJy4vUGF0aFV0aWxzJyk7XG5cbnZhciBfTG9jYXRpb25VdGlscyA9IHJlcXVpcmUoJy4vTG9jYXRpb25VdGlscycpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyID0gcmVxdWlyZSgnLi9jcmVhdGVUcmFuc2l0aW9uTWFuYWdlcicpO1xuXG52YXIgX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNsYW1wID0gZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xudmFyIGNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBwcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB1bmRlZmluZWQgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBwcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9ICgwLCBfY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIyLmRlZmF1bHQpKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyAoMCwgX0xvY2F0aW9uVXRpbHMuY3JlYXRlTG9jYXRpb24pKGVudHJ5LCB1bmRlZmluZWQsIGNyZWF0ZUtleSgpKSA6ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikoZW50cnksIHVuZGVmaW5lZCwgZW50cnkua2V5IHx8IGNyZWF0ZUtleSgpKTtcbiAgfSk7XG5cbiAgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gX1BhdGhVdGlscy5jcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgICgwLCBfd2FybmluZzIuZGVmYXVsdCkoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gKDAsIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uKShwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcblxuICAgICAgdmFyIG5leHRFbnRyaWVzID0gaGlzdG9yeS5lbnRyaWVzLnNsaWNlKDApO1xuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICAoMCwgX3dhcm5pbmcyLmRlZmF1bHQpKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9ICgwLCBfTG9jYXRpb25VdGlscy5jcmVhdGVMb2NhdGlvbikocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIGhpc3RvcnkuZW50cmllc1toaXN0b3J5LmluZGV4XSA9IGxvY2F0aW9uO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBjbGFtcChoaXN0b3J5LmluZGV4ICsgbiwgMCwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aCAtIDEpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmIChvaykge1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICAgIGluZGV4OiBuZXh0SW5kZXhcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBNaW1pYyB0aGUgYmVoYXZpb3Igb2YgRE9NIGhpc3RvcmllcyBieVxuICAgICAgICAvLyBjYXVzaW5nIGEgcmVuZGVyIGFmdGVyIGEgY2FuY2VsbGVkIFBPUC5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ29CYWNrID0gZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIHJldHVybiBnbygtMSk7XG4gIH07XG5cbiAgdmFyIGdvRm9yd2FyZCA9IGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICByZXR1cm4gZ28oMSk7XG4gIH07XG5cbiAgdmFyIGNhbkdvID0gZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcbiAgICByZXR1cm4gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5hcHBlbmRMaXN0ZW5lcihsaXN0ZW5lcik7XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBlbnRyaWVzLmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBlbnRyaWVzW2luZGV4XSxcbiAgICBpbmRleDogaW5kZXgsXG4gICAgZW50cmllczogZW50cmllcyxcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgY2FuR286IGNhbkdvLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gY3JlYXRlTWVtb3J5SGlzdG9yeTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2hpc3RvcnkvY3JlYXRlTWVtb3J5SGlzdG9yeS5qcyIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQWJzb2x1dGUgPSBmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn07XG5cbi8vIEFib3V0IDEuNXggZmFzdGVyIHRoYW4gdGhlIHR3by1hcmcgdmVyc2lvbiBvZiBBcnJheSNzcGxpY2UoKVxudmFyIHNwbGljZU9uZSA9IGZ1bmN0aW9uIHNwbGljZU9uZShsaXN0LCBpbmRleCkge1xuICBmb3IgKHZhciBpID0gaW5kZXgsIGsgPSBpICsgMSwgbiA9IGxpc3QubGVuZ3RoOyBrIDwgbjsgaSArPSAxLCBrICs9IDEpIHtcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgfWxpc3QucG9wKCk7XG59O1xuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxudmFyIHJlc29sdmVQYXRobmFtZSA9IGZ1bmN0aW9uIHJlc29sdmVQYXRobmFtZSh0bykge1xuICB2YXIgZnJvbSA9IGFyZ3VtZW50cy5sZW5ndGggPD0gMSB8fCBhcmd1bWVudHNbMV0gPT09IHVuZGVmaW5lZCA/ICcnIDogYXJndW1lbnRzWzFdO1xuXG4gIHZhciB0b1BhcnRzID0gdG8gJiYgdG8uc3BsaXQoJy8nKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IGZyb20gJiYgZnJvbS5zcGxpdCgnLycpIHx8IFtdO1xuXG4gIHZhciBpc1RvQWJzID0gdG8gJiYgaXNBYnNvbHV0ZSh0byk7XG4gIHZhciBpc0Zyb21BYnMgPSBmcm9tICYmIGlzQWJzb2x1dGUoZnJvbSk7XG4gIHZhciBtdXN0RW5kQWJzID0gaXNUb0FicyB8fCBpc0Zyb21BYnM7XG5cbiAgaWYgKHRvICYmIGlzQWJzb2x1dGUodG8pKSB7XG4gICAgLy8gdG8gaXMgYWJzb2x1dGVcbiAgICBmcm9tUGFydHMgPSB0b1BhcnRzO1xuICB9IGVsc2UgaWYgKHRvUGFydHMubGVuZ3RoKSB7XG4gICAgLy8gdG8gaXMgcmVsYXRpdmUsIGRyb3AgdGhlIGZpbGVuYW1lXG4gICAgZnJvbVBhcnRzLnBvcCgpO1xuICAgIGZyb21QYXJ0cyA9IGZyb21QYXJ0cy5jb25jYXQodG9QYXJ0cyk7XG4gIH1cblxuICBpZiAoIWZyb21QYXJ0cy5sZW5ndGgpIHJldHVybiAnLyc7XG5cbiAgdmFyIGhhc1RyYWlsaW5nU2xhc2ggPSB2b2lkIDA7XG4gIGlmIChmcm9tUGFydHMubGVuZ3RoKSB7XG4gICAgdmFyIGxhc3QgPSBmcm9tUGFydHNbZnJvbVBhcnRzLmxlbmd0aCAtIDFdO1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBsYXN0ID09PSAnLicgfHwgbGFzdCA9PT0gJy4uJyB8fCBsYXN0ID09PSAnJztcbiAgfSBlbHNlIHtcbiAgICBoYXNUcmFpbGluZ1NsYXNoID0gZmFsc2U7XG4gIH1cblxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gZnJvbVBhcnRzLmxlbmd0aDsgaSA+PSAwOyBpLS0pIHtcbiAgICB2YXIgcGFydCA9IGZyb21QYXJ0c1tpXTtcblxuICAgIGlmIChwYXJ0ID09PSAnLicpIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgIH0gZWxzZSBpZiAocGFydCA9PT0gJy4uJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cCsrO1xuICAgIH0gZWxzZSBpZiAodXApIHtcbiAgICAgIHNwbGljZU9uZShmcm9tUGFydHMsIGkpO1xuICAgICAgdXAtLTtcbiAgICB9XG4gIH1cblxuICBpZiAoIW11c3RFbmRBYnMpIGZvciAoOyB1cC0tOyB1cCkge1xuICAgIGZyb21QYXJ0cy51bnNoaWZ0KCcuLicpO1xuICB9aWYgKG11c3RFbmRBYnMgJiYgZnJvbVBhcnRzWzBdICE9PSAnJyAmJiAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKSkgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gcmVzb2x2ZVBhdGhuYW1lO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vcmVzb2x2ZS1wYXRobmFtZS9pbmRleC5qcyIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgdmFsdWVFcXVhbCA9IGZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICBpZiAoYSA9PT0gYikgcmV0dXJuIHRydWU7XG5cbiAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHJldHVybiBmYWxzZTtcblxuICBpZiAoQXJyYXkuaXNBcnJheShhKSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShiKSB8fCBhLmxlbmd0aCAhPT0gYi5sZW5ndGgpIHJldHVybiBmYWxzZTtcblxuICAgIHJldHVybiBhLmV2ZXJ5KGZ1bmN0aW9uIChpdGVtLCBpbmRleCkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoaXRlbSwgYltpbmRleF0pO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGFUeXBlID0gdHlwZW9mIGEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKGEpO1xuICB2YXIgYlR5cGUgPSB0eXBlb2YgYiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoYik7XG5cbiAgaWYgKGFUeXBlICE9PSBiVHlwZSkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChhVHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYVZhbHVlID0gYS52YWx1ZU9mKCk7XG4gICAgdmFyIGJWYWx1ZSA9IGIudmFsdWVPZigpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHZhciBhS2V5cyA9IE9iamVjdC5rZXlzKGEpO1xuICAgIHZhciBiS2V5cyA9IE9iamVjdC5rZXlzKGIpO1xuXG4gICAgaWYgKGFLZXlzLmxlbmd0aCAhPT0gYktleXMubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG5cbiAgICByZXR1cm4gYUtleXMuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIHZhbHVlRXF1YWwoYVtrZXldLCBiW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIGZhbHNlO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gdmFsdWVFcXVhbDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L3ZhbHVlLWVxdWFsL2luZGV4LmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xudmFyIGFkZExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbnZhciBzdHJpcExlYWRpbmdTbGFzaCA9IGV4cG9ydHMuc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxudmFyIHN0cmlwUHJlZml4ID0gZXhwb3J0cy5zdHJpcFByZWZpeCA9IGZ1bmN0aW9uIHN0cmlwUHJlZml4KHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC5pbmRleE9mKHByZWZpeCkgPT09IDAgPyBwYXRoLnN1YnN0cihwcmVmaXgubGVuZ3RoKSA6IHBhdGg7XG59O1xuXG52YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZXhwb3J0cy5zdHJpcFRyYWlsaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcFRyYWlsaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQocGF0aC5sZW5ndGggLSAxKSA9PT0gJy8nID8gcGF0aC5zbGljZSgwLCAtMSkgOiBwYXRoO1xufTtcblxudmFyIHBhcnNlUGF0aCA9IGV4cG9ydHMucGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICBwYXRobmFtZSA9IGRlY29kZVVSSShwYXRobmFtZSk7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG4gIGlmIChoYXNoSW5kZXggIT09IC0xKSB7XG4gICAgaGFzaCA9IHBhdGhuYW1lLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gIH1cblxuICB2YXIgc2VhcmNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCc/Jyk7XG4gIGlmIChzZWFyY2hJbmRleCAhPT0gLTEpIHtcbiAgICBzZWFyY2ggPSBwYXRobmFtZS5zdWJzdHIoc2VhcmNoSW5kZXgpO1xuICAgIHBhdGhuYW1lID0gcGF0aG5hbWUuc3Vic3RyKDAsIHNlYXJjaEluZGV4KTtcbiAgfVxuXG4gIHJldHVybiB7XG4gICAgcGF0aG5hbWU6IHBhdGhuYW1lLFxuICAgIHNlYXJjaDogc2VhcmNoID09PSAnPycgPyAnJyA6IHNlYXJjaCxcbiAgICBoYXNoOiBoYXNoID09PSAnIycgPyAnJyA6IGhhc2hcbiAgfTtcbn07XG5cbnZhciBjcmVhdGVQYXRoID0gZXhwb3J0cy5jcmVhdGVQYXRoID0gZnVuY3Rpb24gY3JlYXRlUGF0aChsb2NhdGlvbikge1xuICB2YXIgcGF0aG5hbWUgPSBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgIHNlYXJjaCA9IGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgIGhhc2ggPSBsb2NhdGlvbi5oYXNoO1xuXG5cbiAgdmFyIHBhdGggPSBwYXRobmFtZSB8fCAnLyc7XG5cbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2ggIT09ICc/JykgcGF0aCArPSBzZWFyY2guY2hhckF0KDApID09PSAnPycgPyBzZWFyY2ggOiAnPycgKyBzZWFyY2g7XG5cbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gJyMnKSBwYXRoICs9IGhhc2guY2hhckF0KDApID09PSAnIycgPyBoYXNoIDogJyMnICsgaGFzaDtcblxuICByZXR1cm4gZW5jb2RlVVJJKHBhdGgpO1xufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9+L2hpc3RvcnkvUGF0aFV0aWxzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5sb2NhdGlvbnNBcmVFcXVhbCA9IGV4cG9ydHMuY3JlYXRlTG9jYXRpb24gPSB1bmRlZmluZWQ7XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfcmVzb2x2ZVBhdGhuYW1lID0gcmVxdWlyZSgncmVzb2x2ZS1wYXRobmFtZScpO1xuXG52YXIgX3Jlc29sdmVQYXRobmFtZTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9yZXNvbHZlUGF0aG5hbWUpO1xuXG52YXIgX3ZhbHVlRXF1YWwgPSByZXF1aXJlKCd2YWx1ZS1lcXVhbCcpO1xuXG52YXIgX3ZhbHVlRXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdmFsdWVFcXVhbCk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIGNyZWF0ZUxvY2F0aW9uID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uIGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBrZXksIGN1cnJlbnRMb2NhdGlvbikge1xuICB2YXIgbG9jYXRpb24gPSB2b2lkIDA7XG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSAoMCwgX1BhdGhVdGlscy5wYXJzZVBhdGgpKHBhdGgpO1xuICAgIGxvY2F0aW9uLnN0YXRlID0gc3RhdGU7XG4gIH0gZWxzZSB7XG4gICAgLy8gT25lLWFyZyBmb3JtOiBwdXNoKGxvY2F0aW9uKVxuICAgIGxvY2F0aW9uID0gX2V4dGVuZHMoe30sIHBhdGgpO1xuXG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9ICgwLCBfcmVzb2x2ZVBhdGhuYW1lMi5kZWZhdWx0KShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbG9jYXRpb247XG59O1xuXG52YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmICgwLCBfdmFsdWVFcXVhbDIuZGVmYXVsdCkoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL34vaGlzdG9yeS9Mb2NhdGlvblV0aWxzLmpzIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlO1xuZXhwb3J0cy5jcmVhdGVQYXRoID0gZXhwb3J0cy5wYXJzZVBhdGggPSBleHBvcnRzLmxvY2F0aW9uc0FyZUVxdWFsID0gZXhwb3J0cy5jcmVhdGVMb2NhdGlvbiA9IGV4cG9ydHMuY3JlYXRlTWVtb3J5SGlzdG9yeSA9IGV4cG9ydHMuY3JlYXRlSGFzaEhpc3RvcnkgPSBleHBvcnRzLmNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gdW5kZWZpbmVkO1xuXG52YXIgX0xvY2F0aW9uVXRpbHMgPSByZXF1aXJlKCcuL0xvY2F0aW9uVXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdjcmVhdGVMb2NhdGlvbicsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgcmV0dXJuIF9Mb2NhdGlvblV0aWxzLmNyZWF0ZUxvY2F0aW9uO1xuICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnbG9jYXRpb25zQXJlRXF1YWwnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfTG9jYXRpb25VdGlscy5sb2NhdGlvbnNBcmVFcXVhbDtcbiAgfVxufSk7XG5cbnZhciBfUGF0aFV0aWxzID0gcmVxdWlyZSgnLi9QYXRoVXRpbHMnKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdwYXJzZVBhdGgnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUGF0aFV0aWxzLnBhcnNlUGF0aDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ2NyZWF0ZVBhdGgnLCB7XG4gIGVudW1lcmFibGU6IHRydWUsXG4gIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgIHJldHVybiBfUGF0aFV0aWxzLmNyZWF0ZVBhdGg7XG4gIH1cbn0pO1xuXG52YXIgX2NyZWF0ZUJyb3dzZXJIaXN0b3J5MiA9IHJlcXVpcmUoJy4vY3JlYXRlQnJvd3Nlckhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVCcm93c2VySGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVCcm93c2VySGlzdG9yeTIpO1xuXG52YXIgX2NyZWF0ZUhhc2hIaXN0b3J5MiA9IHJlcXVpcmUoJy4vY3JlYXRlSGFzaEhpc3RvcnknKTtcblxudmFyIF9jcmVhdGVIYXNoSGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVIYXNoSGlzdG9yeTIpO1xuXG52YXIgX2NyZWF0ZU1lbW9yeUhpc3RvcnkyID0gcmVxdWlyZSgnLi9jcmVhdGVNZW1vcnlIaXN0b3J5Jyk7XG5cbnZhciBfY3JlYXRlTWVtb3J5SGlzdG9yeTMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVNZW1vcnlIaXN0b3J5Mik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmV4cG9ydHMuY3JlYXRlQnJvd3Nlckhpc3RvcnkgPSBfY3JlYXRlQnJvd3Nlckhpc3RvcnkzLmRlZmF1bHQ7XG5leHBvcnRzLmNyZWF0ZUhhc2hIaXN0b3J5ID0gX2NyZWF0ZUhhc2hIaXN0b3J5My5kZWZhdWx0O1xuZXhwb3J0cy5jcmVhdGVNZW1vcnlIaXN0b3J5ID0gX2NyZWF0ZU1lbW9yeUhpc3RvcnkzLmRlZmF1bHQ7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vfi9oaXN0b3J5L2luZGV4LmpzIl0sInNvdXJjZVJvb3QiOiIifQ==